<?xml version="1.0" encoding="UTF-8"?>
<Rul xmlns = "http://www.frontendart.com" xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation = "http://www.frontendart.com rul.xsd">
  <ToolDescription>
    <Configuration name = "Default">
      <ToolDescriptionItem name = "ID">PMD</ToolDescriptionItem>
    </Configuration>
  </ToolDescription>
  <Configurations/>
  <Views/>
  <Edges/>
  <Metric id = "Best Practice Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Best Practices</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Best Practice Rules</DisplayName>
        <Description>Rules which enforce generally accepted best practices.</Description>
        <HelpText>Rules which enforce generally accepted best practices.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Code Style Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Code Style</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Code Style Rules</DisplayName>
        <Description>Rules which enforce a specific coding style.</Description>
        <HelpText>Rules which enforce a specific coding style.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Design Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Design</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Design Rules</DisplayName>
        <Description>Rules that help you discover design issues.</Description>
        <HelpText>Rules that help you discover design issues.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Documentation Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Documentation</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Documentation Rules</DisplayName>
        <Description>Rules that are related to code documentation.</Description>
        <HelpText>Rules that are related to code documentation.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Error Prone Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Error Prone</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Error Prone Rules</DisplayName>
        <Description>Rules to detect constructs that are either broken, extremely confusing or prone to runtime errors.</Description>
        <HelpText>Rules to detect constructs that are either broken, extremely confusing or prone to runtime errors.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Multithreading Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Multithreading</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Multithreading Rules</DisplayName>
        <Description>Rules that flag issues when dealing with multiple threads of execution.</Description>
        <HelpText>Rules that flag issues when dealing with multiple threads of execution.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AAA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidAccessibilityAlteration</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Accessibility Alteration</DisplayName>
        <Description>You should not modify visibility of class or methods using getDeclaredConstructors(), getDeclaredConstructor(Class[]), setAccessible() or PrivilegedAction.</Description>
        <HelpText>&lt;p&gt;Methods such as getDeclaredConstructors(), getDeclaredConstructor(Class[]) and setAccessible(), as the interface PrivilegedAction, allow for the runtime alteration of variable, class, or method visibility, even if they are private. This violates the principle of encapsulation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.reflect.AccessibleObject;&#x0A;import java.lang.reflect.Method;&#x0A;import java.security.PrivilegedAction;&#x0A;&#x0A;public class Violation {&#x0A;  public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {&#x0A;    // Possible call to forbidden getDeclaredConstructors&#x0A;    Class[] arrayOfClass = new Class[1];&#x0A;    this.getClass().getDeclaredConstructors();&#x0A;    this.getClass().getDeclaredConstructor(arrayOfClass);&#x0A;    Class clazz = this.getClass();&#x0A;    clazz.getDeclaredConstructor(arrayOfClass);&#x0A;    clazz.getDeclaredConstructors();&#x0A;      // Possible call to forbidden setAccessible&#x0A;    clazz.getMethod(&amp;quot;&amp;quot;, arrayOfClass).setAccessible(false);&#x0A;    AccessibleObject.setAccessible(null, false);&#x0A;    Method.setAccessible(null, false);&#x0A;    Method[] methodsArray = clazz.getMethods();&#x0A;    int nbMethod;&#x0A;    for ( nbMethod = 0; nbMethod &amp;lt; methodsArray.length; nbMethod++ ) {&#x0A;      methodsArray[nbMethod].setAccessible(false);&#x0A;    }&#x0A;&#x0A;      // Possible call to forbidden PrivilegedAction&#x0A;    PrivilegedAction priv = (PrivilegedAction) new Object(); priv.run();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AAAI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidAssertAsIdentifier</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Assert As Identifier</DisplayName>
        <Description>Avoid using assert as an identifier; it became a reserved word in JDK 1.4</Description>
        <HelpText>Use of the term &apos;assert&apos; will conflict with newer versions of Java since it is a reserved word.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class A {&#x0A;    public class Foo {&#x0A;        String assert = &quot;foo&quot;;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AAL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidArrayLoops</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Array Loops</DisplayName>
        <Description>System.arraycopy is more efficient</Description>
        <HelpText>&lt;p&gt;Instead of manually copying data between two arrays, use the efficient Arrays.copyOf or System.arraycopy method instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;    public void bar() {&#x0A;        int[] a = new int[10];&#x0A;        int[] b = new int[10];&#x0A;        for (int i=0;i&amp;lt;10;i++) {&#x0A;            b[i]=a[i];&#x0A;        }&#x0A;&#x0A;        int[] c = new int[10];&#x0A;        // this will trigger the rule&#x0A;        for (int i=0;i&amp;lt;10;i++) {&#x0A;            b[i]=a[c[i]];&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ABSALIL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidBranchingStatementAsLastInLoop</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Branching Statement As Last In Loop</DisplayName>
        <Description>Avoid using a branching statement as the last in a loop.</Description>
        <HelpText>&lt;p&gt;Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// unusual use of branching statement in a loop&#x0A;for (int i = 0; i &amp;lt; 10; i++) {&#x0A;    if (i*i &amp;lt;= 25) {&#x0A;        continue;&#x0A;    }&#x0A;    break;&#x0A;}&#x0A;&#x0A;// this makes more sense...&#x0A;for (int i = 0; i &amp;lt; 10; i++) {&#x0A;    if (i*i &amp;gt; 25) {&#x0A;        break;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidCallingFinalize</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Calling Finalize</DisplayName>
        <Description>Avoid calling finalize() explicitly</Description>
        <HelpText>&lt;p&gt;The method Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. It should not be invoked by application logic.&lt;/p&gt;&#x0A;&lt;p&gt;Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void foo() {&#x0A;    Bar b = new Bar();&#x0A;    b.finalize();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACG">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AccessorClassGeneration</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Accessor Class Generation</DisplayName>
        <Description>Avoid instantiation through private constructors from outside of the constructor&apos;s class.</Description>
        <HelpText>Instantiation by way of private constructors from outside of the constructor&apos;s class often causes the&#x0A;generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this&#x0A;situation. The generated class file is actually an interface.  It gives the accessing class the ability&#x0A;to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter.&#x0A;This turns a private constructor effectively into one with package scope, and is challenging to discern.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Outer {&#x0A; void method(){&#x0A;  Inner ic = new Inner();//Causes generation of accessor class&#x0A; }&#x0A; public class Inner {&#x0A;  private Inner(){}&#x0A; }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACGE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidCatchingGenericException</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Catching Generic Exception</DisplayName>
        <Description>Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block</Description>
        <HelpText>&lt;p&gt;Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package com.igate.primitive;&#x0A;&#x0A;public class PrimitiveType {&#x0A;&#x0A;    public void downCastPrimitiveType() {&#x0A;        try {&#x0A;            System.out.println(&amp;quot; i [&amp;quot; + i + &amp;quot;]&amp;quot;);&#x0A;        } catch(Exception e) {&#x0A;            e.printStackTrace();&#x0A;        } catch(RuntimeException e) {&#x0A;            e.printStackTrace();&#x0A;        } catch(NullPointerException e) {&#x0A;            e.printStackTrace();&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACNPE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidCatchingNPE</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Catching NPE</DisplayName>
        <Description>Avoid catching NullPointerException; consider removing the cause of the NPE.</Description>
        <HelpText>&lt;p&gt;Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void bar() {&#x0A;        try {&#x0A;            // do something&#x0A;        } catch (NullPointerException npe) {&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidCatchingThrowable</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Catching Throwable</DisplayName>
        <Description>A catch statement should never catch throwable since it includes errors.</Description>
        <HelpText>&lt;p&gt;Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    try {&#x0A;        // do something&#x0A;    } catch (Throwable th) {  // should not catch Throwable&#x0A;        th.printStackTrace();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACWAM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AbstractClassWithoutAbstractMethod</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Abstract Class Without Abstract Method</DisplayName>
        <Description>This abstract class does not have any abstract methods</Description>
        <HelpText>&lt;p&gt;The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided prevent direct instantiation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class Foo {&#x0A;  void int method1() { ... }&#x0A;  void int method2() { ... }&#x0A;  // consider using abstract methods or removing&#x0A;  // the abstract modifier and adding protected constructors&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ACWC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AppendCharacterWithChar</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Append Character With Char</DisplayName>
        <Description>Avoid appending characters as strings in StringBuffer.append.</Description>
        <HelpText>Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;StringBuffer sb = new StringBuffer();&#x0A;sb.append(&quot;a&quot;);     // avoid this&#x0A;&#x0A;StringBuffer sb = new StringBuffer();&#x0A;sb.append(&apos;a&apos;);     // use this instead&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ADL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidDuplicateLiterals</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Duplicate Literals</DisplayName>
        <Description>The String literal {0} appears {1} times in this file; the first occurrence is on line {2}</Description>
        <HelpText>&lt;p&gt;Code containing duplicate String literals can usually be improved by declaring the String as a constant field.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private void bar() {&#x0A;     buz(&amp;quot;Howdy&amp;quot;);&#x0A;     buz(&amp;quot;Howdy&amp;quot;);&#x0A;     buz(&amp;quot;Howdy&amp;quot;);&#x0A;     buz(&amp;quot;Howdy&amp;quot;);&#x0A;}&#x0A;private void buz(String x) {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ADLIBDC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidDecimalLiteralsInBigDecimalConstructor</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Decimal Literals In Big Decimal Constructor</DisplayName>
        <Description>Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal</Description>
        <HelpText>&lt;p&gt;One might assume that the result of “new BigDecimal(0.1)” is exactly equal to 0.1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.&lt;/p&gt;&#x0A;&lt;p&gt;The (String) constructor, on the other hand, is perfectly predictable: ‘new BigDecimal(“0.1”)’ is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the (String) constructor be used in preference to this one.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;BigDecimal bd = new BigDecimal(1.123);       // loss of precision, this would trigger the rule&#x0A;&#x0A;BigDecimal bd = new BigDecimal(&amp;quot;1.123&amp;quot;);     // preferred approach&#x0A;&#x0A;BigDecimal bd = new BigDecimal(12);          // preferred approach, ok for integer values&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ADNIS">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidDeeplyNestedIfStmts</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Deeply Nested If Stmts</DisplayName>
        <Description>Deeply nested if..then statements are hard to read</Description>
        <HelpText>Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;  public void bar(int x, int y, int z) {&#x0A;    if (x&gt;y) {&#x0A;      if (y&gt;z) {&#x0A;        if (z==x) {&#x0A;         // !! too deep&#x0A;        }&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ADS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidDollarSigns</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Dollar Signs</DisplayName>
        <Description>Avoid using dollar signs in variable/method/class/interface names</Description>
        <HelpText>&lt;p&gt;Avoid using dollar signs in variable/method/class/interface names.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Fo$o {  // not a recommended name&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AEAI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidEnumAsIdentifier</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Enum As Identifier</DisplayName>
        <Description>Avoid using enum as an identifier; it&apos;s a reserved word in JDK 1.5</Description>
        <HelpText>Use of the term &apos;enum&apos; will conflict with newer versions of Java since it is a reserved word.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class A {&#x0A;    public class Foo {&#x0A;        String enum = &quot;foo&quot;;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AES">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AddEmptyString</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Add Empty String</DisplayName>
        <Description>Do not add empty strings</Description>
        <HelpText>&lt;p&gt;The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific toString() methods instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String s = &amp;quot;&amp;quot; + 123;                // inefficient&#x0A;String t = Integer.toString(456);   // preferred approach&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AFLV">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidFinalLocalVariable</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Final Local Variable</DisplayName>
        <Description>Avoid using final local variables, turn them into fields</Description>
        <HelpText>Avoid using final local variables, turn them into fields.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyClass {&#x0A;    public void foo() {&#x0A;        final String finalLocalVariable;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AFNMMN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidFieldNameMatchingMethodName</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Field Name Matching Method Name</DisplayName>
        <Description>Field {0} has the same name as a method</Description>
        <HelpText>&lt;p&gt;It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    Object bar;&#x0A;    // bar is data or an action or both?&#x0A;    void bar() {&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AFNMTN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidFieldNameMatchingTypeName</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Field Name Matching Type Name</DisplayName>
        <Description>It is somewhat confusing to have a field name matching the declaring class name</Description>
        <HelpText>&lt;p&gt;It is somewhat confusing to have a field name matching the declaring class name. This probably means that type and/or field names should be chosen more carefully.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Bar {&#x0A;    int foo;    // There is probably a better name that can be used&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AFS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidFileStream</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid File Stream</DisplayName>
        <Description>Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter</Description>
        <HelpText>&lt;p&gt;The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8080225&quot;&gt;JDK-8080225&lt;/a&gt; for details.&lt;/p&gt;&#x0A;&lt;p&gt;The FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called.&lt;/p&gt;&#x0A;&lt;ul&gt;&#x0A;&lt;li&gt;Use &lt;code&gt;Files.newInputStream(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileInputStream(fileName)&lt;/code&gt;.&lt;/li&gt;&#x0A;&lt;li&gt;Use &lt;code&gt;Files.newOutputStream(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileOutputStream(fileName)&lt;/code&gt;.&lt;/li&gt;&#x0A;&lt;li&gt;Use &lt;code&gt;Files.newBufferedReader(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileReader(fileName)&lt;/code&gt;.&lt;/li&gt;&#x0A;&lt;li&gt;Use &lt;code&gt;Files.newBufferedWriter(Paths.get(fileName))&lt;/code&gt; instead of &lt;code&gt;new FileWriter(fileName)&lt;/code&gt;.&lt;/li&gt;&#x0A;&lt;/ul&gt;&#x0A;&lt;p&gt;Please note, that the &lt;code&gt;java.nio&lt;/code&gt; API does not throw a &lt;code&gt;FileNotFoundException&lt;/code&gt; anymore, instead it throws a &lt;code&gt;NoSuchFileException&lt;/code&gt;. If your code dealt explicitly with a &lt;code&gt;FileNotFoundException&lt;/code&gt;, then this needs to be adjusted. Both exceptions are subclasses of &lt;code&gt;IOException&lt;/code&gt;, so catching that one covers both.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// these instantiations cause garbage collection pauses, even if properly closed&#x0A;&#x0A;    FileInputStream fis = new FileInputStream(fileName);&#x0A;    FileOutputStream fos = new FileOutputStream(fileName);&#x0A;    FileReader fr = new FileReader(fileName);&#x0A;    FileWriter fw = new FileWriter(fileName);&#x0A;&#x0A;    // the following instantiations help prevent Garbage Collection pauses, no finalization&#x0A;&#x0A;    try(InputStream is = Files.newInputStream(Paths.get(fileName))) {&#x0A;    }&#x0A;    try(OutputStream os = Files.newOutputStream(Paths.get(fileName))) {&#x0A;    }&#x0A;    try(BufferedReader br = Files.newBufferedReader(Paths.get(fileName), StandardCharsets.UTF_8)) {&#x0A;    }&#x0A;    try(BufferedWriter wr = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {&#x0A;    }&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AICICC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidInstanceofChecksInCatchClause</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Instanceof Checks In Catch Clause</DisplayName>
        <Description>An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.</Description>
        <HelpText>&lt;p&gt;Each caught exception type should be handled in its own catch clause.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try { // Avoid this&#x0A;    // do something&#x0A;} catch (Exception ee) {&#x0A;    if (ee instanceof IOException) {&#x0A;        cleanup();&#x0A;    }&#x0A;}&#x0A;&#x0A;try {  // Prefer this:&#x0A;    // do something&#x0A;} catch (IOException ee) {&#x0A;    cleanup();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AIO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AssignmentInOperand</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment In Operand</DisplayName>
        <Description>Avoid assignments in operands</Description>
        <HelpText>&lt;p&gt;Avoid assignments in operands; this can make code more complicated and harder to read.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    int x = 2;&#x0A;    if ((x = getX()) == 3) {&#x0A;      System.out.println(&amp;quot;3!&amp;quot;);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AIOIL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidInstantiatingObjectsInLoops</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Instantiating Objects In Loops</DisplayName>
        <Description>Avoid instantiating new objects inside loops</Description>
        <HelpText>New objects created within loops should be checked to see if they can created outside them and reused.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Something {&#x0A;    public static void main( String as[] ) {&#x0A;        for (int i = 0; i &lt; 10; i++) {&#x0A;            Foo f = new Foo(); // Avoid this whenever you can it&apos;s really expensive&#x0A;        }&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AISD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ArrayIsStoredDirectly</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Array Is Stored Directly</DisplayName>
        <Description>The user-supplied array &apos;&apos;{0}&apos;&apos; is stored directly.</Description>
        <HelpText>&lt;p&gt;Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private String [] x;&#x0A;        public void foo (String [] param) {&#x0A;        // Don&apos;t do this, make a copy of the array at least&#x0A;        this.x=param;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ALEI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidLosingExceptionInformation</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Losing Exception Information</DisplayName>
        <Description>Avoid statements in a catch block that invoke accessors on the exception without using the information</Description>
        <HelpText>&lt;p&gt;Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    try {&#x0A;        // do something&#x0A;    } catch (SomeException se) {&#x0A;        se.getMessage();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ALIIC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidLiteralsInIfCondition</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Literals In If Condition</DisplayName>
        <Description>Avoid using Literals in Conditional Statements</Description>
        <HelpText>Avoid using hard-coded literals in conditional statements. By declaring them as static variables&#x0A;or private members with descriptive names maintainability is enhanced. By default, the literals &quot;-1&quot; and &quot;0&quot; are ignored.&#x0A;More exceptions can be defined with the property &quot;ignoreMagicNumbers&quot;.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;private static final int MAX_NUMBER_OF_REQUESTS = 10;&#x0A;&#x0A;public void checkRequests() {&#x0A;&#x0A;    if (i == 10) {                        // magic number, buried in a method&#x0A;      doSomething();&#x0A;    }&#x0A;&#x0A;    if (i == MAX_NUMBER_OF_REQUESTS) {    // preferred approach&#x0A;      doSomething();&#x0A;    }&#x0A;&#x0A;    if (aString.indexOf(&apos;.&apos;) != -1) {}     // magic number -1, by default ignored&#x0A;    if (aString.indexOf(&apos;.&apos;) &gt;= 0) { }     // alternative approach&#x0A;&#x0A;    if (aDouble &gt; 0.0) {}                  // magic number 0.0&#x0A;    if (aDouble &gt;= Double.MIN_VALUE) {}    // preferred approach&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ALOC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AtLeastOneConstructor</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>At Least One Constructor</DisplayName>
        <Description>Each class should declare at least one constructor</Description>
        <HelpText>Each non-static class should declare at least one constructor.&#x0A;Classes with solely static members are ignored, refer to [UseUtilityClassRule](pmd_rules_java_design.html#useutilityclass) to detect those.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;   // missing constructor&#x0A;  public void doSomething() { ... }&#x0A;  public void doOtherThing { ... }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AMG">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AccessorMethodGeneration</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Accessor Method Generation</DisplayName>
        <Description>Avoid autogenerated methods to access private fields and methods of inner / outer classes</Description>
        <HelpText>&lt;p&gt;When accessing a private field / method from another class, the Java compiler will generate a accessor methods with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can be avoided by changing the visibility of the field / method from private to package-private.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class OuterClass {&#x0A;    private int counter;&#x0A;    /* package */ int id;&#x0A;&#x0A;    public class InnerClass {&#x0A;        InnerClass() {&#x0A;            OuterClass.this.counter++; // wrong accessor method will be generated&#x0A;        }&#x0A;&#x0A;        public int getOuterClassId() {&#x0A;            return OuterClass.this.id; // id is package-private, no accessor method needed&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AMUO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidMultipleUnaryOperators</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Multiple Unary Operators</DisplayName>
        <Description>Using multiple unary operators may be a bug, and/or is confusing.</Description>
        <HelpText>&lt;p&gt;The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// These are typo bugs, or at best needlessly complex and confusing:&#x0A;int i = - -1;&#x0A;int j = + - +1;&#x0A;int z = ~~2;&#x0A;boolean b = !!true;&#x0A;boolean c = !!!true;&#x0A;&#x0A;// These are better:&#x0A;int i = 1;&#x0A;int j = -1;&#x0A;int z = 2;&#x0A;boolean b = true;&#x0A;boolean c = false;&#x0A;&#x0A;// And these just make your brain hurt:&#x0A;int i = ~-2;&#x0A;int j = -~7;&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AN">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AbstractNaming</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Abstract Naming</DisplayName>
        <Description>Abstract classes should be named &apos;AbstractXXX&apos;</Description>
        <HelpText>Abstract classes should be named &apos;AbstractXXX&apos;.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by [Class Naming Conventions](#PMD_CNC).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public abstract class Foo { // should be AbstractFoo&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_APFIFC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidProtectedFieldInFinalClass</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Protected Field In Final Class</DisplayName>
        <Description>Avoid protected fields in a final class.  Change to private or package access.</Description>
        <HelpText>&lt;p&gt;Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public final class Bar {&#x0A;  private int x;&#x0A;  protected int y;  // bar cannot be subclassed, so is y really private or package visible?&#x0A;  Bar() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_APMIFCNE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidProtectedMethodInFinalClassNotExtending</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Protected Method In Final Class Not Extending</DisplayName>
        <Description>Avoid protected methods in a final class that doesn&apos;t extend anything other than Object.  Change to private or package access.</Description>
        <HelpText>&lt;p&gt;Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public final class Foo {&#x0A;  private int bar() {}&#x0A;  protected int baz() {} // Foo cannot be subclassed, and doesn&apos;t extend anything, so is baz() really private or package visible?&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_APMP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidPrefixingMethodParameters</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Prefixing Method Parameters</DisplayName>
        <Description>Avoid prefixing parameters by in, out or inOut. Uses Javadoc to document this behavior.</Description>
        <HelpText>&lt;p&gt;Prefixing parameters by ‘in’ or ‘out’ pollutes the name of the parameters and reduces code readability. To indicate whether or not a parameter will be modify in a method, its better to document method behavior with Javadoc.&lt;/p&gt;&#x0A;&lt;p&gt;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule &lt;a href=&quot;#PMD_FPNC&quot;&gt;Formal Parameter Naming Conventions&lt;/a&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Not really clear&#x0A;public class Foo {&#x0A;  public void bar(&#x0A;      int inLeftOperand,&#x0A;      Result outRightOperand) {&#x0A;      outRightOperand.setValue(inLeftOperand * outRightOperand.getValue());&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Far more useful&#x0A;public class Foo {&#x0A;  /**&#x0A;   *&#x0A;   * @param leftOperand, (purpose), not modified by method.&#x0A;   * @param rightOperand (purpose), will be modified by the method: contains the result.&#x0A;   */&#x0A;  public void bar(&#x0A;        int leftOperand,&#x0A;        Result rightOperand) {&#x0A;        rightOperand.setValue(leftOperand * rightOperand.getValue());&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_APST">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidPrintStackTrace</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Print Stack Trace</DisplayName>
        <Description>Avoid printStackTrace(); use a logger call instead.</Description>
        <HelpText>&lt;p&gt;Avoid printStackTrace(); use a logger call instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;    void bar() {&#x0A;        try {&#x0A;            // do something&#x0A;        } catch (Exception e) {&#x0A;            e.printStackTrace();&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ARE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidRethrowingException</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Rethrowing Exception</DisplayName>
        <Description>A catch statement that catches an exception only to rethrow it should be avoided.</Description>
        <HelpText>&lt;p&gt;Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    try {&#x0A;        // do something&#x0A;    }  catch (SomeException se) {&#x0A;       throw se;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ARLV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidReassigningLoopVariables</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Reassigning Loop Variables</DisplayName>
        <Description>Avoid reassigning the loop control variable &apos;&apos;{0}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed.&lt;/p&gt;&#x0A;&lt;p&gt;In foreach-loops, configured by the &lt;code&gt;foreachReassign&lt;/code&gt; property: - &lt;code&gt;deny&lt;/code&gt;: Report any reassignment of the loop variable in the loop body. &lt;em&gt;This is the default.&lt;/em&gt; - &lt;code&gt;allow&lt;/code&gt;: Don’t check the loop variable. - &lt;code&gt;firstOnly&lt;/code&gt;: Report any reassignments of the loop variable, except as the first statement in the loop body. &lt;em&gt;This is useful if some kind of normalization or clean-up of the value before using is permitted, but any other change of the variable is not.&lt;/em&gt;&lt;/p&gt;&#x0A;&lt;p&gt;In for-loops, configured by the &lt;code&gt;forReassign&lt;/code&gt; property: - &lt;code&gt;deny&lt;/code&gt;: Report any reassignment of the control variable in the loop body. &lt;em&gt;This is the default.&lt;/em&gt; - &lt;code&gt;allow&lt;/code&gt;: Don’t check the control variable. - &lt;code&gt;skip&lt;/code&gt;: Report any reassignments of the control variable, except conditional increments/decrements (&lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;, &lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;). &lt;em&gt;This prevents accidental reassignments or unconditional increments of the control variable.&lt;/em&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private void foo() {&#x0A;    for (String s : listOfStrings()) {&#x0A;      s = s.trim(); // OK, when foreachReassign is &amp;quot;firstOnly&amp;quot; or &amp;quot;allow&amp;quot;&#x0A;      doSomethingWith(s);&#x0A;&#x0A;      s = s.toUpper(); // OK, when foreachReassign is &amp;quot;allow&amp;quot;&#x0A;      doSomethingElseWith(s);&#x0A;    }&#x0A;&#x0A;    for (int i=0; i &amp;lt; 10; i++) {&#x0A;      if (check(i)) {&#x0A;        i++; // OK, when forReassign is &amp;quot;skip&amp;quot; or &amp;quot;allow&amp;quot;&#x0A;      }&#x0A;&#x0A;      i = 5;  // OK, when forReassign is &amp;quot;allow&amp;quot;&#x0A;&#x0A;      doSomethingWith(i);&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ARP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidReassigningParameters</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Reassigning Parameters</DisplayName>
        <Description>Avoid reassigning parameters such as &apos;&apos;{0}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private void foo(String bar) {&#x0A;    bar = &amp;quot;something else&amp;quot;;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ASAML">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidSynchronizedAtMethodLevel</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Synchronized At Method Level</DisplayName>
        <Description>Use block level rather than method level synchronization</Description>
        <HelpText>&lt;p&gt;Method-level synchronization can cause problems when new code is added to the method. Block-level synchronization helps to ensure that only the code that needs synchronization gets it.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  // Try to avoid this:&#x0A;  synchronized void foo() {&#x0A;  }&#x0A;  // Prefer this:&#x0A;  void bar() {&#x0A;    synchronized(this) {&#x0A;    }&#x0A;  }&#x0A;&#x0A;  // Try to avoid this for static methods:&#x0A;  static synchronized void fooStatic() {&#x0A;  }&#x0A;&#x0A;  // Prefer this:&#x0A;  static void barStatic() {&#x0A;    synchronized(Foo.class) {&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ASBF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidStringBufferField</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid String Buffer Field</DisplayName>
        <Description>StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).</Description>
        <HelpText>&lt;p&gt;StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private StringBuffer buffer;    // potential memory leak as an instance variable;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ATG">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidThreadGroup</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Thread Group</DisplayName>
        <Description>Avoid using java.lang.ThreadGroup; it is not thread safe</Description>
        <HelpText>&lt;p&gt;Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;    void buz() {&#x0A;        ThreadGroup tg = new ThreadGroup(&amp;quot;My threadgroup&amp;quot;);&#x0A;        tg = new ThreadGroup(tg, &amp;quot;my thread group&amp;quot;);&#x0A;        tg = Thread.currentThread().getThreadGroup();&#x0A;        tg = System.getSecurityManager().getThreadGroup();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ATNFS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AssignmentToNonFinalStatic</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Assignment To Non Final Static</DisplayName>
        <Description>Possible unsafe assignment to a non-final static field in a constructor.</Description>
        <HelpText>&lt;p&gt;Identifies a possible unsafe usage of a static field.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class StaticField {&#x0A;   static int x;&#x0A;   public FinalFields(int y) {&#x0A;    x = y; // unsafe&#x0A;   }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ATNIOSE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidThrowingNewInstanceOfSameException</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Throwing New Instance Of Same Exception</DisplayName>
        <Description>A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided</Description>
        <HelpText>&lt;p&gt;Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    try {&#x0A;        // do something&#x0A;    } catch (SomeException se) {&#x0A;        // harmless comment&#x0A;        throw new SomeException(se);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ATNPE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidThrowingNullPointerException</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Throwing Null Pointer Exception</DisplayName>
        <Description>Avoid throwing null pointer exceptions.</Description>
        <HelpText>&lt;p&gt;Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the virtual machine threw it. To avoid a method being called with a null parameter, you may consider using an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception. However, there are better ways to handle this:&lt;/p&gt;&#x0A;&lt;blockquote&gt;&#x0A;&lt;p&gt;&lt;em&gt;Effective Java, 3rd Edition, Item 72: Favor the use of standard exceptions&lt;/em&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Arguably, every erroneous method invocation boils down to an illegal argument or state, but other exceptions are standardly used for certain kinds of illegal arguments and states. If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException.&lt;/p&gt;&#x0A;&lt;/blockquote&gt;&#x0A;&lt;p&gt;To implement that, you are encouraged to use &lt;code&gt;java.util.Objects.requireNonNull()&lt;/code&gt; (introduced in Java 1.7). This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters.&lt;/p&gt;&#x0A;&lt;p&gt;Your parameter validation could thus look like the following:&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;public class Foo {&#x0A;    private String exampleValue;&#x0A;      &#x0A;    void setExampleValue(String exampleValue) {&#x0A;      // check, throw and assignment in a single standard call&#x0A;      this.exampleValue = Objects.requireNonNull(exampleValue, &amp;quot;exampleValue must not be null!&amp;quot;);&#x0A;    }&#x0A;  }&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void bar() {&#x0A;        throw new NullPointerException();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ATRET">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidThrowingRawExceptionTypes</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Throwing Raw Exception Types</DisplayName>
        <Description>Avoid throwing raw exception types.</Description>
        <HelpText>&lt;p&gt;Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void bar() throws Exception {&#x0A;        throw new Exception();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AUHCIP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidUsingHardCodedIP</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Using Hard Coded IP</DisplayName>
        <Description>Do not hard code the IP address ${variableName}</Description>
        <HelpText>&lt;p&gt;Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP adresses is preferable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private String ip = &amp;quot;127.0.0.1&amp;quot;;     // not recommended&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AUNC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidUsingNativeCode</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Using Native Code</DisplayName>
        <Description>The use of native code is not recommended.</Description>
        <HelpText>&lt;p&gt;Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeJNIClass {&#x0A;&#x0A;     public SomeJNIClass() {&#x0A;         System.loadLibrary(&amp;quot;nativelib&amp;quot;);&#x0A;     }&#x0A;&#x0A;     static {&#x0A;         System.loadLibrary(&amp;quot;nativelib&amp;quot;);&#x0A;     }&#x0A;&#x0A;     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {&#x0A;         System.loadLibrary(&amp;quot;nativelib&amp;quot;);&#x0A;     }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AUOV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidUsingOctalValues</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Using Octal Values</DisplayName>
        <Description>Do not start a literal by 0 unless it&apos;s an octal value</Description>
        <HelpText>&lt;p&gt;Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;int i = 012;    // set i with 10 not 12&#x0A;int j = 010;    // set j with 8 not 10&#x0A;k = i * j;      // set k with 80 not 120&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AUST">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidUsingShortType</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Using Short Type</DisplayName>
        <Description>Do not use the short type</Description>
        <HelpText>Java uses the &apos;short&apos; type to reduce memory usage, not to optimize calculation. In fact, the JVM does not have any&#x0A;arithmetic capabilities for the short type: the JVM must convert the short into an int, do the proper calculation&#x0A;and convert the int back to a short. Thus any storage gains found through use of the &apos;short&apos; type may be offset by&#x0A;adverse impacts on performance.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class UsingShort {&#x0A;   private short doNotUseShort = 0;&#x0A;&#x0A;   public UsingShort() {&#x0A;    short shouldNotBeUsed = 1;&#x0A;    doNotUseShort += shouldNotBeUsed;&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AUV">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>AvoidUsingVolatile</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Avoid Using Volatile</DisplayName>
        <Description>Use of modifier volatile is not recommended.</Description>
        <HelpText>Use of the keyword &apos;volatile&apos; is generally used to fine tune a Java application, and therefore, requires&#x0A;a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore,&#x0A;the volatile keyword should not be used for maintenance purpose and portability.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class ThrDeux {&#x0A;  private volatile String var1; // not suggested&#x0A;  private          String var2; // preferred&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_AbCWAM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>AbstractClassWithoutAnyMethod</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Abstract Class Without Any Method</DisplayName>
        <Description>No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.</Description>
        <HelpText>&lt;p&gt;If an abstract class does not provides any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class Example {&#x0A;    String field;&#x0A;    int otherField;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_BC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>BadComparison</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bad Comparison</DisplayName>
        <Description>Avoid equality comparisons with Double.NaN</Description>
        <HelpText>&lt;p&gt;Avoid equality comparisons with Double.NaN. Due to the implicit lack of representation precision when comparing floating point numbers these are likely to cause logic errors.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;boolean x = (y == Double.NaN);&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_BGMN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>BooleanGetMethodName</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Boolean Get Method Name</DisplayName>
        <Description>A &apos;getX()&apos; method which returns a boolean should be named &apos;isX()&apos;</Description>
        <HelpText>&lt;p&gt;Methods that return boolean results should be named as predicate statements to denote this. I.e, ‘isReady()’, ‘hasValues()’, ‘canCommit()’, ‘willFail()’, etc. Avoid the use of the ‘get’ prefix for these methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean getFoo();            // bad&#x0A;public boolean isFoo();             // ok&#x0A;public boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_BI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>BooleanInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Boolean Instantiation</DisplayName>
        <Description>Avoid instantiating Boolean objects; reference Boolean.TRUE or Boolean.FALSE or call Boolean.valueOf() instead.</Description>
        <HelpText>&lt;p&gt;Avoid instantiating Boolean objects; you can reference Boolean.TRUE, Boolean.FALSE, or call Boolean.valueOf() instead. Note that new Boolean() is deprecated since JDK 9 for that reason.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Boolean bar = new Boolean(&amp;quot;true&amp;quot;);        // unnecessary creation, just reference Boolean.TRUE;&#x0A;Boolean buz = Boolean.valueOf(false);    // ...., just reference Boolean.FALSE;&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_BII">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>BigIntegerInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Big Integer Instantiation</DisplayName>
        <Description>Don&apos;t create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)</Description>
        <HelpText>&lt;p&gt;Don’t create instances of already existing BigInteger (BigInteger.ZERO, BigInteger.ONE) and for Java 1.5 onwards, BigInteger.TEN and BigDecimal (BigDecimal.ZERO, BigDecimal.ONE, BigDecimal.TEN)&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;BigInteger bi = new BigInteger(1);       // reference BigInteger.ONE instead&#x0A;BigInteger bi2 = new BigInteger(&amp;quot;0&amp;quot;);    // reference BigInteger.ZERO instead&#x0A;BigInteger bi3 = new BigInteger(0.0);    // reference BigInteger.ZERO instead&#x0A;BigInteger bi4;&#x0A;bi4 = new BigInteger(0);                 // reference BigInteger.ZERO instead&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_BMSS">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>BeanMembersShouldSerialize</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Bean Members Should Serialize</DisplayName>
        <Description>Found non-transient, non-static member. Please mark as transient or provide accessors.</Description>
        <HelpText>If a class is a bean, or is referenced by a bean directly or indirectly it needs to be serializable. &#x0A;Member variables need to be marked as transient, static, or have accessor methods in the class. Marking &#x0A;variables as transient is the safest and easiest modification. Accessor methods should follow the Java &#x0A;naming conventions, i.e. for a variable named foo, getFoo() and setFoo() accessor methods should be provided.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;private transient int someFoo;  // good, it&apos;s transient&#x0A;private static int otherFoo;    // also OK&#x0A;private int moreFoo;            // OK, has proper accessors, see below&#x0A;private int badFoo;             // bad, should be marked transient&#x0A;&#x0A;private void setMoreFoo(int moreFoo){&#x0A;      this.moreFoo = moreFoo;&#x0A;}&#x0A;&#x0A;private int getMoreFoo(){&#x0A;      return this.moreFoo;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_BNC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>BrokenNullCheck</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Broken Null Check</DisplayName>
        <Description>Method call on object which may be null</Description>
        <HelpText>&lt;p&gt;The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of &amp;amp;&amp;amp; or vice versa.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public String bar(String string) {&#x0A;  // should be &amp;amp;&amp;amp;&#x0A;    if (string!=null || !string.equals(&amp;quot;&amp;quot;))&#x0A;        return string;&#x0A;  // should be ||&#x0A;    if (string==null &amp;amp;&amp;amp; string.equals(&amp;quot;&amp;quot;))&#x0A;        return string;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ByI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ByteInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Byte Instantiation</DisplayName>
        <Description>Avoid instantiating Byte objects. Call Byte.valueOf() instead</Description>
        <HelpText>Calling new Byte() causes memory allocation that can be avoided by the static Byte.valueOf().&#x0A;It makes use of an internal cache that recycles earlier instances making it more memory efficient.&#x0A;Note that new Byte() is deprecated since JDK 9 for that reason.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    private Byte i = new Byte(0); // change to Byte i = Byte.valueOf(0);&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CASR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ConsecutiveAppendsShouldReuse</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Consecutive Appends Should Reuse</DisplayName>
        <Description>StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.</Description>
        <HelpText>&lt;p&gt;Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found &lt;a href=&quot;https://github.com/pmd/pmd/issues/202#issuecomment-274349067&quot;&gt;here&lt;/a&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String foo = &amp;quot; &amp;quot;;&#x0A;&#x0A;StringBuffer buf = new StringBuffer();&#x0A;buf.append(&amp;quot;Hello&amp;quot;); // poor&#x0A;buf.append(foo);&#x0A;buf.append(&amp;quot;World&amp;quot;);&#x0A;&#x0A;StringBuffer buf = new StringBuffer();&#x0A;buf.append(&amp;quot;Hello&amp;quot;).append(foo).append(&amp;quot;World&amp;quot;); // good&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CBO">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CouplingBetweenObjects</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Coupling Between Objects</DisplayName>
        <Description>High amount of different objects as members denotes a high coupling</Description>
        <HelpText>This rule counts the number of unique attributes, local variables, and return types within an object. &#x0A;A number higher than the specified threshold can indicate a high degree of coupling.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;import com.Blah;&#x0A;import org.Bar;&#x0A;import org.Bardo;&#x0A;&#x0A;public class Foo {&#x0A;    private Blah var1;&#x0A;    private Bar var2;&#x0A;&#x0A;    //followed by many imports of unique objects&#x0A;    void ObjectC doWork() {&#x0A;        Bardo var55;&#x0A;        ObjectA var44;&#x0A;        ObjectZ var93;&#x0A;        return something;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CyclomaticComplexity</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Cyclomatic Complexity</DisplayName>
        <Description>The {0} &apos;&apos;{1}&apos;&apos; has a{2} cyclomatic complexity of {3}.</Description>
        <HelpText>The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic&#x0A;in a single method makes its behaviour hard to read and change.&#x0A;&#x0A;Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method,&#x0A;plus one for the method entry. Decision points are places where the control flow jumps to another place in the&#x0A;program. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more&#x0A;details on the calculation, see the documentation of the [Cyclo metric](pmd_java_metrics_index.html#cyclomatic-complexity-cyclo).&#x0A;&#x0A;Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote&#x0A;high complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity &gt;= 10.&#x0A;Additionnally, classes with many methods of moderate complexity get reported as well once the total of their&#x0A;methods&apos; complexities reaches 80, even if none of the methods was directly reported.&#x0A;&#x0A;Reported methods should be broken down into several smaller methods. Reported classes should probably be broken down&#x0A;into subcomponents.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;class Foo {&#x0A;  void baseCyclo() {                // Cyclo = 1&#x0A;    highCyclo();&#x0A;  }&#x0A;&#x0A;  void highCyclo() {                // Cyclo = 10: reported!&#x0A;    int x = 0, y = 2;&#x0A;    boolean a = false, b = true;&#x0A;&#x0A;    if (a &amp;&amp; (y == 1 ? b : true)) { // +3&#x0A;      if (y == x) {                 // +1&#x0A;        while (true) {              // +1&#x0A;          if (x++ &lt; 20) {           // +1&#x0A;            break;                  // +1&#x0A;          }&#x0A;        }&#x0A;      } else if (y == t &amp;&amp; !d) {    // +2&#x0A;        x = a ? y : x;              // +1&#x0A;      } else {&#x0A;        x = 2;&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CCEWTA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ClassCastExceptionWithToArray</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Class Cast Exception With To Array</DisplayName>
        <Description>This usage of the Collection.toArray() method will throw a ClassCastException.</Description>
        <HelpText>&lt;p&gt;When deriving an array of a specific class from your Collection, one should provide an array of the same class as the parameter of the toArray() method. Doing otherwise you will will result in a ClassCastException.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Collection c = new ArrayList();&#x0A;Integer obj = new Integer(1);&#x0A;c.add(obj);&#x0A;&#x0A;    // this would trigger the rule (and throw a ClassCastException if executed)&#x0A;Integer[] a = (Integer [])c.toArray();&#x0A;&#x0A;   // this is fine and will not trigger the rule&#x0A;Integer[] b = (Integer [])c.toArray(new Integer[c.size()]);&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CCOM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ConstructorCallsOverridableMethod</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Constructor Calls Overridable Method</DisplayName>
        <Description>Overridable {0} called during object construction</Description>
        <HelpText>&lt;p&gt;Calling overridable methods during construction poses a risk of invoking methods on an incompletely constructed object and can be difficult to debug. It may leave the sub-class unable to construct its superclass or forced to replicate the construction process completely within itself, losing the ability to call super(). If the default constructor contains a call to an overridable method, the subclass may be completely uninstantiable. Note that this includes method calls throughout the control flow graph - i.e., if a constructor Foo() calls a private method bar() that calls a public method buz(), this denotes a problem.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SeniorClass {&#x0A;  public SeniorClass(){&#x0A;      toString(); //may throw NullPointerException if overridden&#x0A;  }&#x0A;  public String toString(){&#x0A;    return &amp;quot;IAmSeniorClass&amp;quot;;&#x0A;  }&#x0A;}&#x0A;public class JuniorClass extends SeniorClass {&#x0A;  private String name;&#x0A;  public JuniorClass(){&#x0A;    super(); //Automatic call leads to NullPointerException&#x0A;    name = &amp;quot;JuniorClass&amp;quot;;&#x0A;  }&#x0A;  public String toString(){&#x0A;    return name.toUpperCase();&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CDAM">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CommentDefaultAccessModifier</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comment Default Access Modifier</DisplayName>
        <Description>Missing commented default access modifier</Description>
        <HelpText>To avoid mistakes if we want that a Method, Constructor, Field or Nested class have a default access modifier&#x0A;we must add a comment at the beginning of it&apos;s declaration.&#x0A;By default the comment must be /* default */ or /* package */, if you want another, you have to provide a regular expression.&#x0A;This rule ignores by default all cases that have a @VisibleForTesting annotation. Use the&#x0A;property &quot;ignoredAnnotations&quot; to customize the recognized annotations.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    final String stringValue = &quot;some string&quot;;&#x0A;    String getString() {&#x0A;       return stringValue;&#x0A;    }&#x0A;&#x0A;    class NestedFoo {&#x0A;    }&#x0A;}&#x0A;&#x0A;// should be&#x0A;public class Foo {&#x0A;    /* default */ final String stringValue = &quot;some string&quot;;&#x0A;    /* default */ String getString() {&#x0A;       return stringValue;&#x0A;    }&#x0A;&#x0A;    /* default */ class NestedFoo {&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CII">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ConstantsInInterface</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Constants In Interface</DisplayName>
        <Description>Avoid constants in interfaces. Interfaces define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.</Description>
        <HelpText>&lt;p&gt;Avoid constants in interfaces. Interfaces should define types, constants are implementation details better placed in classes or enums. See Effective Java, item 19.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface ConstantInterface {&#x0A;    public static final int CONST1 = 1; // violation, no fields allowed in interface!&#x0A;    static final int CONST2 = 1;        // violation, no fields allowed in interface!&#x0A;    final int CONST3 = 1;               // violation, no fields allowed in interface!&#x0A;    int CONST4 = 1;                     // violation, no fields allowed in interface!&#x0A;}&#x0A;&#x0A;// with ignoreIfHasMethods = false&#x0A;public interface AnotherConstantInterface {&#x0A;    public static final int CONST1 = 1; // violation, no fields allowed in interface!&#x0A;&#x0A;    int anyMethod();&#x0A;}&#x0A;&#x0A;// with ignoreIfHasMethods = true&#x0A;public interface YetAnotherConstantInterface {&#x0A;    public static final int CONST1 = 1; // no violation&#x0A;&#x0A;    int anyMethod();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CollapsibleIfStatements</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Collapsible If Statements</DisplayName>
        <Description>These nested if statements could be combined</Description>
        <HelpText>&lt;p&gt;Sometimes two consecutive ‘if’ statements can be consolidated by separating their conditions with a boolean short-circuit operator.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar() {&#x0A;    if (x) {            // original implementation&#x0A;        if (y) {&#x0A;            // do stuff&#x0A;        }&#x0A;    }&#x0A;}&#x0A;&#x0A;void bar() {&#x0A;    if (x &amp;amp;&amp;amp; y) {        // optimized implementation&#x0A;        // do stuff&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CLA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ConsecutiveLiteralAppends</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Consecutive Literal Appends</DisplayName>
        <Description>StringBuffer (or StringBuilder).append is called {0} consecutive times with literals. Use a single append with a single combined String.</Description>
        <HelpText>&lt;p&gt;Consecutively calling StringBuffer/StringBuilder.append(…) with literals should be avoided. Since the literals are constants, they can already be combined into a single String literal and this String can be appended in a single method call.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;StringBuilder buf = new StringBuilder();&#x0A;buf.append(&amp;quot;Hello&amp;quot;).append(&amp;quot; &amp;quot;).append(&amp;quot;World&amp;quot;);    // poor&#x0A;buf.append(&amp;quot;Hello World&amp;quot;);                          // good&#x0A;&#x0A;buf.append(&apos;h&apos;).append(&apos;e&apos;).append(&apos;l&apos;).append(&apos;l&apos;).append(&apos;o&apos;); // poor&#x0A;buf.append(&amp;quot;hello&amp;quot;);                                             // good&#x0A;&#x0A;buf.append(1).append(&apos;m&apos;);  // poor&#x0A;buf.append(&amp;quot;1m&amp;quot;);           // good&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CMMBP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CloneMethodMustBePublic</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clone Method Must Be Public</DisplayName>
        <Description>clone() method must be public if the class implements Cloneable</Description>
        <HelpText>&lt;p&gt;The java Manual says “By convention, classes that implement this interface should override Object.clone (which is protected) with a public method.”&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements Cloneable {&#x0A;    @Override&#x0A;    protected Object clone() throws CloneNotSupportedException { // Violation, must be public&#x0A;    }&#x0A;}&#x0A;&#x0A;public class Foo implements Cloneable {&#x0A;    @Override&#x0A;    protected Foo clone() { // Violation, must be public&#x0A;    }&#x0A;}&#x0A;&#x0A;public class Foo implements Cloneable {&#x0A;    @Override&#x0A;    public Object clone() // Ok&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CMRTMMCN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CloneMethodReturnTypeMustMatchClassName</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clone Method Return Type Must Match Class Name</DisplayName>
        <Description>The return type of the clone() method must be the class name when implements Cloneable</Description>
        <HelpText>&lt;p&gt;If a class implements cloneable the return type of the method clone() must be the class name. That way, the caller of the clone method doesn’t need to cast the returned clone to the correct type.&lt;/p&gt;&#x0A;&lt;p&gt;Note: This is only possible with Java 1.5 or higher.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements Cloneable {&#x0A;    @Override&#x0A;    protected Object clone() { // Violation, Object must be Foo&#x0A;    }&#x0A;}&#x0A;&#x0A;public class Foo implements Cloneable {&#x0A;    @Override&#x0A;    public Foo clone() { //Ok&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ClassNamingConventions</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Class Naming Conventions</DisplayName>
        <Description>The {0} name &apos;&apos;{1}&apos;&apos; doesn&apos;&apos;t match &apos;&apos;{2}&apos;&apos;</Description>
        <HelpText>Configurable naming conventions for type declarations. This rule reports&#x0A;            type declarations which do not match the regex that applies to their&#x0A;            specific kind (e.g. enum or interface). Each regex can be configured through&#x0A;            properties.&#x0A;&#x0A;            By default this rule uses the standard Java naming convention (Pascal case),&#x0A;            and reports utility class names not ending with &apos;Util&apos;.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;// This is Pascal case, the recommended naming convention in Java&#x0A;// Note that the default values of this rule don&apos;t allow underscores &#x0A;// or accented characters in type names&#x0A;public class FooBar {}&#x0A;&#x0A;// You may want abstract classes to be named &apos;AbstractXXX&apos;,&#x0A;// in which case you can customize the regex for abstract&#x0A;// classes to &apos;Abstract[A-Z]\w+&apos;&#x0A;public abstract class Thing {}&#x0A;&#x0A;// This class doesn&apos;t respect the convention, and will be flagged&#x0A;public class Éléphant {}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_COWE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CompareObjectsWithEquals</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Compare Objects With Equals</DisplayName>
        <Description>Use equals() to compare object references.</Description>
        <HelpText>Use equals() to compare object references; avoid comparing them with ==.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;class Foo {&#x0A;  boolean bar(String a, String b) {&#x0A;    return a == b;&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CR">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CommentRequired</OriginalId>
      <GroupMember>Documentation Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comment Required</DisplayName>
        <Description>Comment is required</Description>
        <HelpText>Denotes whether comments are required (or unwanted) for specific language elements.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;/**&#x0A;* &#x0A;*&#x0A;* @author Jon Doe&#x0A;*/&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CRS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CheckResultSet</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Check Result Set</DisplayName>
        <Description>Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet.</Description>
        <HelpText>&lt;p&gt;Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is ‘false’, it should be handled properly.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Statement stat = conn.createStatement();&#x0A;ResultSet rst = stat.executeQuery(&amp;quot;SELECT name FROM person&amp;quot;);&#x0A;rst.next();     // what if it returns false? bad form&#x0A;String firstName = rst.getString(1);&#x0A;&#x0A;Statement stat = conn.createStatement();&#x0A;ResultSet rst = stat.executeQuery(&amp;quot;SELECT name FROM person&amp;quot;);&#x0A;if (rst.next()) {    // result is properly examined and used&#x0A;    String firstName = rst.getString(1);&#x0A;    } else  {&#x0A;        // handle missing data&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CS">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CommentSize</OriginalId>
      <GroupMember>Documentation Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comment Size</DisplayName>
        <Description>Comment is too large</Description>
        <HelpText>Determines whether the dimensions of non-header comments found are within the specified limits.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;/**&#x0A;*&#x0A;*   too many lines!&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*&#x0A;*/&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CSB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ControlStatementBraces</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Control Statement Braces</DisplayName>
        <Description>This statement should have braces</Description>
        <HelpText>&lt;p&gt;Enforce a policy for braces on control statements. It is recommended to use braces on ‘if … else’ statements and loop statements, even if they are optional. This usually makes the code clearer, and helps prepare the future when you need to add another statement. That said, this rule lets you control which statements are required to have braces via properties.&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;        From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces,&#x0A;        and IfElseStmtMustUseBraces.&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;while (true)    // not recommended&#x0A;  x++;&#x0A;&#x0A;while (true) {  // preferred approach&#x0A;  x++;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CSF">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CallSuperFirst</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Call Super First</DisplayName>
        <Description>super should be called at the start of the method</Description>
        <HelpText>Super should be called at the start of the method&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class DummyActivity extends Activity {&#x0A;    public void onCreate(Bundle bundle) {&#x0A;        // missing call to super.onCreate(bundle)&#x0A;        foo();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CSIC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CallSuperInConstructor</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Call Super In Constructor</DisplayName>
        <Description>It is a good practice to call super() in a constructor</Description>
        <HelpText>It is a good practice to call super() in a constructor. If super() is not called but&#x0A;another constructor (such as an overloaded constructor) is called, this rule will not report it.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo extends Bar{&#x0A;  public Foo() {&#x0A;   // call the constructor of Bar&#x0A;   super();&#x0A;  }&#x0A; public Foo(int code) {&#x0A;  // do something with code&#x0A;   this();&#x0A;   // no problem with this&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CSL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CallSuperLast</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Call Super Last</DisplayName>
        <Description>super should be called at the end of the method</Description>
        <HelpText>Super should be called at the end of the method&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class DummyActivity extends Activity {&#x0A;    public void onPause() {&#x0A;        foo();&#x0A;        // missing call to super.onPause()&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CSR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CheckSkipResult</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Check Skip Result</DisplayName>
        <Description>Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped.</Description>
        <HelpText>&lt;p&gt;The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;&#x0A;   private FileInputStream _s = new FileInputStream(&amp;quot;file&amp;quot;);&#x0A;&#x0A;   public void skip(int n) throws IOException {&#x0A;      _s.skip(n); // You are not sure that exactly n bytes are skipped&#x0A;   }&#x0A;&#x0A;   public void skipExactly(int n) throws IOException {&#x0A;      while (n != 0) {&#x0A;         long skipped = _s.skip(n);&#x0A;         if (skipped == 0)&#x0A;            throw new EOFException();&#x0A;         n -= skipped;&#x0A;      }&#x0A;   }&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CT">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ConfusingTernary</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Confusing Ternary</DisplayName>
        <Description>Avoid if (x != y) ..; else ..;</Description>
        <HelpText>Avoid negation within an &quot;if&quot; expression with an &quot;else&quot; clause.  For example, rephrase:&#x0A;`if (x != y) diff(); else same();` as: `if (x == y) same(); else diff();`.&#x0A;&#x0A;Most &quot;if (x != y)&quot; cases without an &quot;else&quot; are often return cases, so consistent use of this&#x0A;rule makes the code easier to read.  Also, this resolves trivial ordering problems, such&#x0A;as &quot;does the error case go first?&quot; or &quot;does the common case go first?&quot;.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;boolean bar(int x, int y) {&#x0A;    return (x != y) ? diff : same;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CTCNSE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CloneThrowsCloneNotSupportedException</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clone Throws Clone Not Supported Exception</DisplayName>
        <Description>clone() method should throw CloneNotSupportedException</Description>
        <HelpText>&lt;p&gt;The method clone() should throw a CloneNotSupportedException.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass implements Cloneable{&#x0A;    public Object clone() { // will cause an error&#x0A;         MyClass clone = (MyClass)super.clone();&#x0A;         return clone;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CWOPCSBF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ClassWithOnlyPrivateConstructorsShouldBeFinal</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Class With Only Private Constructors Should Be Final</DisplayName>
        <Description>A class which only has private constructors should be final</Description>
        <HelpText>&lt;p&gt;A class with only private constructors should be final, unless the private constructor is invoked by a inner class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {  //Should be final&#x0A;    private Foo() { }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ClMMIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CloneMethodMustImplementCloneable</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Clone Method Must Implement Cloneable</DisplayName>
        <Description>clone() method should be implemented only if implementing Cloneable interface</Description>
        <HelpText>&lt;p&gt;The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException.&lt;/p&gt;&#x0A;&lt;p&gt;The rule can also detect, if the class implements or extends a Cloneable class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {&#x0A; public Object clone() throws CloneNotSupportedException {&#x0A;  return foo;&#x0A; }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ClR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>CloseResource</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Close Resource</DisplayName>
        <Description>Ensure that resources like this {0} object are closed after use</Description>
        <HelpText>&lt;p&gt;Ensure that resources (like Connection, Statement, and ResultSet objects) are always closed after use.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;  public void foo() {&#x0A;    Connection c = pool.getConnection();&#x0A;    try {&#x0A;      // do stuff&#x0A;    } catch (SQLException ex) {&#x0A;     // handle exception&#x0A;    } finally {&#x0A;      // oops, should close the connection using &apos;close&apos;!&#x0A;      // c.close();&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_CoC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>CommentContent</OriginalId>
      <GroupMember>Documentation Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Comment Content</DisplayName>
        <Description>Invalid words or phrases found</Description>
        <HelpText>A rule for the politically correct... we don&apos;t want to offend anyone.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;//OMG, this is horrible, Bob is an idiot !!!&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DAA">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>DataflowAnomalyAnalysis</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dataflow Anomaly Analysis</DisplayName>
        <Description>Found &apos;&apos;{0}&apos;&apos;-anomaly for variable &apos;&apos;{1}&apos;&apos; (lines &apos;&apos;{2}&apos;&apos;-&apos;&apos;{3}&apos;&apos;).</Description>
        <HelpText>The dataflow analysis tracks local definitions, undefinitions and references to variables on different paths on the data flow.&#x0A;From those informations there can be found various problems.&#x0A;&#x0A;1. UR - Anomaly: There is a reference to a variable that was not defined before. This is a bug and leads to an error.&#x0A;2. DU - Anomaly: A recently defined variable is undefined. These anomalies may appear in normal source text.&#x0A;3. DD - Anomaly: A recently defined variable is redefined. This is ominous but don&apos;t have to be a bug.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public void foo() {&#x0A;  int buz = 5;&#x0A;  buz = 6; // redefinition of buz -&gt; dd-anomaly&#x0A;  foo(buz);&#x0A;  buz = 2;&#x0A;} // buz is undefined when leaving scope -&gt; du-anomaly&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DataClass</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Data Class</DisplayName>
        <Description>The class &apos;&apos;{0}&apos;&apos; is suspected to be a Data Class (WOC={1}, NOPA={2}, NOAM={3}, WMC={4})</Description>
        <HelpText>&lt;p&gt;Data Classes are simple data holders, which reveal most of their state, and without complex functionality. The lack of functionality may indicate that their behaviour is defined elsewhere, which is a sign of poor data-behaviour proximity. By directly exposing their internals, Data Classes break encapsulation, and therefore reduce the system’s maintainability and understandability. Moreover, classes tend to strongly rely on their data representation, which makes for a brittle design.&lt;/p&gt;&#x0A;&lt;p&gt;Refactoring a Data Class should focus on restoring a good data-behaviour proximity. In most cases, that means moving the operations defined on the data back into the class. In some other cases it may make sense to remove entirely the class and move the data into the former client classes.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class DataClass {&#x0A;&#x0A;  public int bar = 0;&#x0A;  public int na = 0;&#x0A;  private int bee = 0;&#x0A;&#x0A;  public void setBee(int n) {&#x0A;    bee = n;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DCL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DoubleCheckedLocking</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Double Checked Locking</DisplayName>
        <Description>Double checked locking is not thread safe in Java.</Description>
        <HelpText>&lt;p&gt;Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it calls the constructor of the object the reference points to.&lt;/p&gt;&#x0A;&lt;p&gt;Note: With Java 5, you can make Double checked locking work, if you declare the variable to be &lt;code&gt;volatile&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;For more details refer to: &lt;a href=&quot;http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html&quot; class=&quot;uri&quot;&gt;http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html&lt;/a&gt; or &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot; class=&quot;uri&quot;&gt;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&lt;/a&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    /*volatile */ Object baz = null; // fix for Java5 and later: volatile&#x0A;    Object bar() {&#x0A;        if (baz == null) { // baz may be non-null yet not fully created&#x0A;            synchronized(this) {&#x0A;                if (baz == null) {&#x0A;                    baz = new Object();&#x0A;                }&#x0A;              }&#x0A;        }&#x0A;        return baz;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DCTR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DontCallThreadRun</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dont Call Thread Run</DisplayName>
        <Description>Don&apos;t call Thread.run() explicitly, use Thread.start()</Description>
        <HelpText>&lt;p&gt;Explicitly calling Thread.run() method will execute in the caller’s thread of control. Instead, call Thread.start() for the intended behavior.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;Thread t = new Thread();&#x0A;t.run();            // use t.start() instead&#x0A;new Thread().run(); // same violation&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DuplicateImports</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Duplicate Imports</DisplayName>
        <Description>Avoid duplicate imports such as &apos;&apos;{0}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Duplicate or overlapping import statements should be avoided.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.String;&#x0A;import java.lang.*;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DIJL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DontImportJavaLang</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dont Import Java Lang</DisplayName>
        <Description>Avoid importing anything from the package &apos;java.lang&apos;</Description>
        <HelpText>&lt;p&gt;Avoid importing anything from the package ‘java.lang’. These classes are automatically imported (JLS 7.5.3).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.lang.String;    // this is unnecessary&#x0A;&#x0A;public class Foo {}&#x0A;&#x0A;// --- in another source code file...&#x0A;&#x0A;import java.lang.*;         // this is bad&#x0A;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DontImportSun</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dont Import Sun</DisplayName>
        <Description>Avoid importing anything from the &apos;sun.*&apos; packages</Description>
        <HelpText>&lt;p&gt;Avoid importing anything from the ’sun.*’ packages. These packages are not portable and are likely to change.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import sun.misc.foo;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DLNLISS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DefaultLabelNotLastInSwitchStmt</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Default Label Not Last In Switch Stmt</DisplayName>
        <Description>The default label should be the last label in a switch statement</Description>
        <HelpText>&lt;p&gt;By convention, the default label should be the last label in a switch statement.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar(int a) {&#x0A;   switch (a) {&#x0A;    case 1:  // do something&#x0A;       break;&#x0A;    default:  // the default case should be last, by convention&#x0A;       break;&#x0A;    case 2:&#x0A;       break;&#x0A;   }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNCGCE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotCallGarbageCollectionExplicitly</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Call Garbage Collection Explicitly</DisplayName>
        <Description>Do not explicitly trigger a garbage collection.</Description>
        <HelpText>&lt;p&gt;Calls to System.gc(), Runtime.getRuntime().gc(), and System.runFinalization() are not advised. Code should have the same behavior whether the garbage collection is disabled using the option -Xdisableexplicitgc or not. Moreover, “modern” jvms do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class GCCall {&#x0A;    public GCCall() {&#x0A;        // Explicit gc call !&#x0A;        System.gc();&#x0A;    }&#x0A;&#x0A;    public void doSomething() {&#x0A;        // Explicit gc call !&#x0A;        Runtime.getRuntime().gc();&#x0A;    }&#x0A;&#x0A;    public explicitGCcall() {&#x0A;        // Explicit gc call !&#x0A;        System.gc();&#x0A;    }&#x0A;&#x0A;    public void doSomething() {&#x0A;        // Explicit gc call !&#x0A;        Runtime.getRuntime().gc();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNCSE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotCallSystemExit</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Call System Exit</DisplayName>
        <Description>System.exit() should not be used in J2EE/JEE apps</Description>
        <HelpText>&lt;p&gt;Web applications should not call System.exit(), since only the web container or the application server should stop the JVM. This rule also checks for the equivalent call Runtime.getRuntime().exit().&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    System.exit(0);                 // never call this when running in an application server!&#x0A;}&#x0A;public void foo() {&#x0A;    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNEJLE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotExtendJavaLangError</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Extend Java Lang Error</DisplayName>
        <Description>Exceptions should not extend java.lang.Error</Description>
        <HelpText>&lt;p&gt;Errors are system exceptions. Do not extend them.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Error { }&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNEJLT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotExtendJavaLangThrowable</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Extend Java Lang Throwable</DisplayName>
        <Description>Exceptions should not extend java.lang.Throwable</Description>
        <HelpText>&lt;p&gt;Extend Exception or RuntimeException instead of Throwable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Throwable { }&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNHCSDC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotHardCodeSDCard</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Hard Code SDCard</DisplayName>
        <Description>Do not hardcode /sdcard.</Description>
        <HelpText>Use Environment.getExternalStorageDirectory() instead of &quot;/sdcard&quot;&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyActivity extends Activity {&#x0A;    protected void foo() {&#x0A;        String storageLocation = &quot;/sdcard/mypackage&quot;;   // hard-coded, poor approach&#x0A;&#x0A;       storageLocation = Environment.getExternalStorageDirectory() + &quot;/mypackage&quot;; // preferred approach&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNTEIF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotThrowExceptionInFinally</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Throw Exception In Finally</DisplayName>
        <Description>A throw statement in a finally block makes the control flow hard to understand.</Description>
        <HelpText>&lt;p&gt;Throwing exceptions within a ‘finally’ block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule “A throw in a finally block”&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void bar() {&#x0A;        try {&#x0A;            // Here do some stuff&#x0A;        } catch( Exception e) {&#x0A;            // Handling the issue&#x0A;        } finally {&#x0A;            // is this really a good idea ?&#x0A;            throw new Exception();&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DNUT">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>DoNotUseThreads</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Do Not Use Threads</DisplayName>
        <Description>To be compliant to J2EE, a webapp should not use any thread.</Description>
        <HelpText>The J2EE specification explicitly forbids the use of threads.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;// This is not allowed&#x0A;public class UsingThread extends Thread {&#x0A;&#x0A;}&#x0A;&#x0A;// Neither this,&#x0A;public class OtherThread implements Runnable {&#x0A;    // Nor this ...&#x0A;    public void methode() {&#x0A;        Runnable thread = new Thread(); thread.run();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DefaultPackage</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Default Package</DisplayName>
        <Description>Use explicit scoping instead of the default package private level</Description>
        <HelpText>&lt;p&gt;Use explicit scoping instead of accidental usage of default package private level. The rule allows methods and fields annotated with Guava’s &lt;span class=&quot;citation&quot; data-cites=&quot;VisibleForTesting&quot;&gt;@VisibleForTesting&lt;/span&gt;.&lt;/p&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_DUFTFLI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>DontUseFloatTypeForLoopIndices</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Dont Use Float Type For Loop Indices</DisplayName>
        <Description>Don&apos;t use floating point for loop indices. If you must use floating point, use double.</Description>
        <HelpText>&lt;p&gt;Don’t use floating point for loop indices. If you must use floating point, use double unless you’re certain that float provides enough precision and you have a compelling performance need (space or time).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Count {&#x0A;  public static void main(String[] args) {&#x0A;    final int START = 2000000000;&#x0A;    int count = 0;&#x0A;    for (float f = START; f &amp;lt; START + 50; f++)&#x0A;      count++;&#x0A;      //Prints 0 because (float) START == (float) (START + 50).&#x0A;      System.out.println(count);&#x0A;      //The termination test misbehaves due to floating point granularity.&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EAFC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ExceptionAsFlowControl</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Exception As Flow Control</DisplayName>
        <Description>Avoid using exceptions as flow control.</Description>
        <HelpText>&lt;p&gt;Using Exceptions as form of flow control is not recommended as they obscure true exceptions when debugging. Either add the necessary validation or use an alternate control structure.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    try {&#x0A;        try {&#x0A;        } catch (Exception e) {&#x0A;            throw new WrapperException(e);&#x0A;            // this is essentially a GOTO to the WrapperException catch block&#x0A;        }&#x0A;    } catch (WrapperException e) {&#x0A;        // do some more stuff&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ECB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyCatchBlock</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Catch Block</DisplayName>
        <Description>Avoid empty catch blocks</Description>
        <HelpText>&lt;p&gt;Empty Catch Block finds instances where an exception is caught, but nothing is done.&lt;br /&gt;&#x0A;In most circumstances, this swallows an exception which should either be acted on or reported.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doSomething() {&#x0A;    try {&#x0A;        FileInputStream fis = new FileInputStream(&amp;quot;/tmp/bugger&amp;quot;);&#x0A;    } catch (IOException ioe) {&#x0A;        // not good&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ECL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ExcessiveClassLength</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Excessive Class Length</DisplayName>
        <Description>Avoid really long classes.</Description>
        <HelpText>Excessive class file lengths are usually indications that the class may be burdened with excessive &#x0A;responsibilities that could be provided by external classes or functions. In breaking these methods&#x0A;apart the code becomes more manageable and ripe for reuse.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    public void bar1() {&#x0A;        // 1000 lines of code&#x0A;    }&#x0A;    public void bar2() {&#x0A;        // 1000 lines of code&#x0A;    }&#x0A;    public void bar3() {&#x0A;        // 1000 lines of code&#x0A;    }&#x0A;&#x0A;    public void barN() {&#x0A;        // 1000 lines of code&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyFinalizer</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Finalizer</DisplayName>
        <Description>Avoid empty finalize methods</Description>
        <HelpText>&lt;p&gt;Empty finalize methods serve no purpose and should be removed. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;   protected void finalize() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EFB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyFinallyBlock</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Finally Block</DisplayName>
        <Description>Avoid empty finally blocks</Description>
        <HelpText>&lt;p&gt;Empty finally blocks serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void bar() {&#x0A;        try {&#x0A;            int x=2;&#x0A;        } finally {&#x0A;            // empty!&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ExcessiveImports</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Excessive Imports</DisplayName>
        <Description>A high number of imports can indicate a high degree of coupling within an object.</Description>
        <HelpText>A high number of imports can indicate a high degree of coupling within an object. This rule &#x0A;counts the number of unique imports and reports a violation if the count is above the &#x0A;user-specified threshold.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;import blah.blah.Baz;&#x0A;import blah.blah.Bif;&#x0A;// 18 others from the same package elided&#x0A;public class Foo {&#x0A;    public void doWork() {}&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyIfStmt</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty If Stmt</DisplayName>
        <Description>Avoid empty &apos;if&apos; statements</Description>
        <HelpText>&lt;p&gt;Empty If Statement finds instances where a condition is checked but nothing is done about it.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A; void bar(int x) {&#x0A;  if (x == 0) {&#x0A;   // empty!&#x0A;  }&#x0A; }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EMIACSBA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyMethodInAbstractClassShouldBeAbstract</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Method In Abstract Class Should Be Abstract</DisplayName>
        <Description>An empty method in an abstract class should be abstract instead</Description>
        <HelpText>&lt;p&gt;Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public abstract class ShouldBeAbstract {&#x0A;    public Object couldBeAbstract() {&#x0A;        // Should be abstract method ?&#x0A;        return null;&#x0A;    }&#x0A;&#x0A;    public void couldBeAbstract() {&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EML">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ExcessiveMethodLength</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Excessive Method Length</DisplayName>
        <Description>Avoid really long methods.</Description>
        <HelpText>When methods are excessively long this usually indicates that the method is doing more than its&#x0A;name/signature might suggest. They also become challenging for others to digest since excessive &#x0A;scrolling causes readers to lose focus.&#x0A;Try to reduce the method length by creating helper methods and removing any copy/pasted code.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public void doSomething() {&#x0A;    System.out.println(&quot;Hello world!&quot;);&#x0A;    System.out.println(&quot;Hello world!&quot;);&#x0A;    // 98 copies omitted for brevity.&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EqualsNull</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Equals Null</DisplayName>
        <Description>Avoid using equals() to compare against null</Description>
        <HelpText>&lt;p&gt;Tests for null should not use the equals() method. The ‘==’ operator should be used instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String x = &amp;quot;foo&amp;quot;;&#x0A;&#x0A;if (x.equals(null)) {   // bad form&#x0A;    doSomething();&#x0A;}&#x0A;&#x0A;if (x == null) {        // preferred&#x0A;    doSomething();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ExtendsObject</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Extends Object</DisplayName>
        <Description>No need to explicitly extend Object.</Description>
        <HelpText>&lt;p&gt;No need to explicitly extend Object.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends Object {     // not required&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EPC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ExcessivePublicCount</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Excessive Public Count</DisplayName>
        <Description>This class has a bunch of public methods and attributes</Description>
        <HelpText>Classes with large numbers of public methods and attributes require disproportionate testing efforts&#x0A;since combinational side effects grow rapidly and increase risk. Refactoring these classes into&#x0A;smaller ones not only increases testability and reliability but also allows new variations to be&#x0A;developed easily.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    public String value;&#x0A;    public Bar something;&#x0A;    public Variable var;&#x0A;    // [... more more public attributes ...]&#x0A;&#x0A;    public void doWork() {}&#x0A;    public void doMoreWork() {}&#x0A;    public void doWorkAgain() {}&#x0A;    // [... more more public methods ...]&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EPL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ExcessiveParameterList</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Excessive Parameter List</DisplayName>
        <Description>Avoid long parameter lists.</Description>
        <HelpText>Methods with numerous parameters are a challenge to maintain, especially if most of them share the&#x0A;same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public void addPerson(      // too many arguments liable to be mixed up&#x0A;    int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {&#x0A;&#x0A;    . . . .&#x0A;}&#x0A; &#x0A;public void addPerson(      // preferred approach&#x0A;    Date birthdate, BodyMeasurements measurements, int ssn) {&#x0A;&#x0A;    . . . .&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ESB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptySynchronizedBlock</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Synchronized Block</DisplayName>
        <Description>Avoid empty synchronized blocks</Description>
        <HelpText>&lt;p&gt;Empty synchronized blocks serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void bar() {&#x0A;        synchronized (this) {&#x0A;            // empty!&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ESNIL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyStatementNotInLoop</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Statement Not In Loop</DisplayName>
        <Description>An empty statement (semicolon) not part of a loop</Description>
        <HelpText>&lt;p&gt;An empty statement (or a semicolon by itself) that is not used as the sole body of a ‘for’ or ‘while’ loop is probably a bug. It could also be a double semicolon, which has no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doit() {&#x0A;      // this is probably not what you meant to do&#x0A;      ;&#x0A;      // the extra semicolon here this is not necessary&#x0A;      System.out.println(&amp;quot;look at the extra semicolon&amp;quot;);;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ESS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptySwitchStatements</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Switch Statements</DisplayName>
        <Description>Avoid empty switch statements</Description>
        <HelpText>&lt;p&gt;Empty switch statements serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    int x = 2;&#x0A;    switch (x) {&#x0A;        // once there was code here&#x0A;        // but it&apos;s been commented out or something&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ETB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyTryBlock</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Try Block</DisplayName>
        <Description>Avoid empty try blocks</Description>
        <HelpText>&lt;p&gt;Avoid empty try blocks - what’s the point?&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void bar() {&#x0A;        try {&#x0A;        } catch (Exception e) {&#x0A;            e.printStackTrace();&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EWS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyWhileStmt</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty While Stmt</DisplayName>
        <Description>Avoid empty &apos;while&apos; statements</Description>
        <HelpText>&lt;p&gt;Empty While Statement finds all instances where a while statement does nothing.&lt;br /&gt;&#x0A;If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar(int a, int b) {&#x0A;    while (a == b) {&#x0A;        // empty!&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EmI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyInitializer</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Initializer</DisplayName>
        <Description>Empty initializer was found</Description>
        <HelpText>Empty initializers serve no purpose and should be removed.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;&#x0A;   static {} // Why ?&#x0A;&#x0A;   {} // Again, why ?&#x0A;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_EmSB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>EmptyStatementBlock</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Empty Statement Block</DisplayName>
        <Description>Avoid empty block statements.</Description>
        <HelpText>&lt;p&gt;Empty block statements serve no purpose and should be removed.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;&#x0A;   private int _bar;&#x0A;&#x0A;   public void setBar(int bar) {&#x0A;      { _bar = bar; } // Why not?&#x0A;      {} // But remove this.&#x0A;   }&#x0A;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FDNCSF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>FinalizeDoesNotCallSuperFinalize</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Finalize Does Not Call Super Finalize</DisplayName>
        <Description>Last statement in finalize method should be a call to super.finalize()</Description>
        <HelpText>&lt;p&gt;If the finalize() is implemented, its last action should be to call super.finalize. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;protected void finalize() {&#x0A;    something();&#x0A;    // neglected to call super.finalize()&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FDSBASOC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>FieldDeclarationsShouldBeAtStartOfClass</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Field Declarations Should Be At Start Of Class</DisplayName>
        <Description>Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.</Description>
        <HelpText>&lt;p&gt;Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class HelloWorldBean {&#x0A;&#x0A;  // Field declared before methods / inner classes - OK&#x0A;  private String _thing;&#x0A;&#x0A;  public String getMessage() {&#x0A;    return &amp;quot;Hello World!&amp;quot;;&#x0A;  }&#x0A;&#x0A;  // Field declared after methods / inner classes - avoid this&#x0A;  private String _fieldInWrongLocation;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FFCBS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>FinalFieldCouldBeStatic</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Final Field Could Be Static</DisplayName>
        <Description>This final field could be made static</Description>
        <HelpText>&lt;p&gt;If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public final int BAR = 42; // this could be static and save some space&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FLCBF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ForLoopCanBeForeach</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>For Loop Can Be Foreach</DisplayName>
        <Description>This &apos;for&apos; loop can be replaced by a &apos;foreach&apos; loop</Description>
        <HelpText>&lt;p&gt;Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to access an element of the list or array, only has one update statement, and loops through &lt;em&gt;every&lt;/em&gt; element of the list or array left to right.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {&#x0A;  void loop(List&amp;lt;String&amp;gt; l) {&#x0A;    for (int i = 0; i &amp;lt; l.size(); i++) { // pre Java 1.5&#x0A;      System.out.println(l.get(i));&#x0A;    }&#x0A;&#x0A;    for (String s : l) {        // post Java 1.5&#x0A;      System.out.println(s);&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FLMUB">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ForLoopsMustUseBraces</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>For Loops Must Use Braces</DisplayName>
        <Description>Avoid using &apos;for&apos; statements without curly braces</Description>
        <HelpText>Avoid using &apos;for&apos; statements without using curly braces. If the code formatting or &#x0A;indentation is lost then it becomes difficult to separate the code being controlled &#x0A;from the rest.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Control Statement Braces](#PMD_CSB).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;for (int i = 0; i &lt; 42; i++)&#x0A;   foo();&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FLSBWL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ForLoopShouldBeWhileLoop</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>For Loop Should Be While Loop</DisplayName>
        <Description>This for loop could be simplified to a while loop</Description>
        <HelpText>&lt;p&gt;Some for loops can be simplified to while loops, this makes them more concise.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void bar() {&#x0A;        for (;true;) true; // No Init or Update part, may as well be: while (true)&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FLVC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ForLoopVariableCount</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>For Loop Variable Count</DisplayName>
        <Description>Too many control variables in the &apos;for&apos; statement</Description>
        <HelpText>&lt;p&gt;Having a lot of control variables in a ‘for’ loop makes it harder to see what range of values the loop iterates over. By default this rule allows a regular ‘for’ loop with only one variable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// this will be reported with the default setting of at most one control variable in a for loop&#x0A;for (int i = 0, j = 0; i &amp;lt; 10; i++, j += 2) {&#x0A;   foo();&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>FieldNamingConventions</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Field Naming Conventions</DisplayName>
        <Description>The {0} name &apos;&apos;{1}&apos;&apos; doesn&apos;&apos;t match &apos;&apos;{2}&apos;&apos;</Description>
        <HelpText>Configurable naming conventions for field declarations. This rule reports variable declarations&#x0A;            which do not match the regex that applies to their specific kind ---e.g. constants (static final),&#x0A;            enum constant, final field. Each regex can be configured through properties.&#x0A;&#x0A;            By default this rule uses the standard Java naming convention (Camel case), and uses the ALL_UPPER&#x0A;            convention for constants and enum constants.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;class Foo {&#x0A;                int myField = 1; // This is in camel case, so it&apos;s ok&#x0A;                int my_Field = 1; // This contains an underscore, it&apos;s not ok by default&#x0A;                                  // but you may allow it, or even require the &quot;my_&quot; prefix&#x0A;&#x0A;                final int FinalField = 1; // you may configure a different convention for final fields,&#x0A;                                          // e.g. here PascalCase: [A-Z][a-zA-Z0-9]*&#x0A;&#x0A;                interface Interface {&#x0A;                    double PI = 3.14; // interface &quot;fields&quot; use the constantPattern property&#x0A;                }&#x0A;&#x0A;                enum AnEnum {&#x0A;                    ORG, NET, COM; // These use a separate property but are set to ALL_UPPER by default&#x0A;                }&#x0A;            }&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>FinalizeOverloaded</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Finalize Overloaded</DisplayName>
        <Description>Finalize methods should not be overloaded</Description>
        <HelpText>&lt;p&gt;Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM.&lt;/p&gt;&#x0A;&lt;p&gt;Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    // this is confusing and probably a bug&#x0A;    protected void finalize(int a) {&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FOCSF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>FinalizeOnlyCallsSuperFinalize</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Finalize Only Calls Super Finalize</DisplayName>
        <Description>Finalize should do something besides just calling super.finalize()</Description>
        <HelpText>&lt;p&gt;If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;protected void finalize() {&#x0A;    super.finalize();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FPNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>FormalParameterNamingConventions</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Formal Parameter Naming Conventions</DisplayName>
        <Description>The {0} name &apos;&apos;{1}&apos;&apos; doesn&apos;&apos;t match &apos;&apos;{2}&apos;&apos;</Description>
        <HelpText>Configurable naming conventions for formal parameters of methods and lambdas.&#x0A;            This rule reports formal parameters which do not match the regex that applies to their&#x0A;            specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be&#x0A;            configured through properties.&#x0A;&#x0A;            By default this rule uses the standard Java naming convention (Camel case).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;class Foo {&#x0A;&#x0A;                abstract void bar(int myInt); // This is Camel case, so it&apos;s ok&#x0A;&#x0A;                void bar(int my_i) { // this will be reported&#x0A;&#x0A;                }&#x0A;&#x0A;                void lambdas() {&#x0A;&#x0A;                    // lambdas parameters can be configured separately&#x0A;                    Consumer&lt;String&gt; lambda1 = s_str -&gt; { };&#x0A;&#x0A;                    // lambda parameters with an explicit type can be configured separately&#x0A;                    Consumer&lt;String&gt; lambda1 = (String str) -&gt; { };&#x0A;&#x0A;                }&#x0A;&#x0A;            }&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_FSBP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>FinalizeShouldBeProtected</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Finalize Should Be Protected</DisplayName>
        <Description>If you override finalize(), make it protected</Description>
        <HelpText>&lt;p&gt;When overriding the finalize(), the new method should be set as protected. If made public, other classes may invoke it at inappropriate times.&lt;/p&gt;&#x0A;&lt;p&gt;Note that Oracle has declared Object.finalize() as deprecated since JDK 9.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void finalize() {&#x0A;    // do something&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_GC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>GodClass</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>God Class</DisplayName>
        <Description>Possible God Class (WMC={0}, ATFD={2}, TCC={1})</Description>
        <HelpText>The God Class rule detects the God Class design flaw using metrics. God classes do too many things,&#x0A;are very big and overly complex. They should be split apart to be more object-oriented.&#x0A;The rule uses the detection strategy described in &quot;Object-Oriented Metrics in Practice&quot;.&#x0A;The violations are reported against the entire class.&#x0A;&#x0A;See also the references:&#x0A;&#x0A;Michele Lanza and Radu Marinescu. Object-Oriented Metrics in Practice:&#x0A;Using Software Metrics to Characterize, Evaluate, and Improve the Design&#x0A;of Object-Oriented Systems. Springer, Berlin, 1 edition, October 2006. Page 80.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_GLS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>GuardLogStatement</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Guard Log Statement</DisplayName>
        <Description>Logger calls should be surrounded by log level guards.</Description>
        <HelpText>&lt;p&gt;Whenever using a log level, one should check if the loglevel is actually enabled, or otherwise skip the associate String creation and manipulation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Add this for performance&#x0A;    if (log.isDebugEnabled() { ...&#x0A;        log.debug(&amp;quot;log something&amp;quot; + &amp;quot; and &amp;quot; + &amp;quot;concat strings&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_GN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>GenericsNaming</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Generics Naming</DisplayName>
        <Description>Generics names should be a one letter long and upper case.</Description>
        <HelpText>&lt;p&gt;Names for references to generic values should be limited to a single uppercase letter.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface GenericDao&amp;lt;E extends BaseModel, K extends Serializable&amp;gt; extends BaseDao {&#x0A;    // This is ok...&#x0A;}&#x0A;&#x0A;public interface GenericDao&amp;lt;E extends BaseModel, K extends Serializable&amp;gt; {&#x0A;    // Also this&#x0A;}&#x0A;&#x0A;public interface GenericDao&amp;lt;e extends BaseModel, K extends Serializable&amp;gt; {&#x0A;    // &apos;e&apos; should be an &apos;E&apos;&#x0A;}&#x0A;&#x0A;public interface GenericDao&amp;lt;EF extends BaseModel, K extends Serializable&amp;gt; {&#x0A;   // &apos;EF&apos; is not ok.&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_HCCK">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>HardCodedCryptoKey</OriginalId>
      <GroupMember>Security Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Hard Coded Crypto Key</DisplayName>
        <Description>Do not use hard coded encryption keys</Description>
        <HelpText>&lt;p&gt;Do not use hard coded values for cryptographic operations. Please store keys outside of source code.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void good() {&#x0A;        SecretKeySpec secretKeySpec = new SecretKeySpec(Properties.getKey(), &amp;quot;AES&amp;quot;);&#x0A;    }&#x0A;&#x0A;    void bad() {&#x0A;        SecretKeySpec secretKeySpec = new SecretKeySpec(&amp;quot;my secret here&amp;quot;.getBytes(), &amp;quot;AES&amp;quot;);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ICB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>IdenticalCatchBranches</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Identical Catch Branches</DisplayName>
        <Description>&apos;&apos;catch&apos;&apos; branch identical to &apos;&apos;{0}&apos;&apos; branch</Description>
        <HelpText>&lt;p&gt;Identical &lt;code&gt;catch&lt;/code&gt; branches use up vertical space and increase the complexity of code without adding functionality. It’s better style to collapse identical branches into a single multi-catch branch.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;try {&#x0A;    // do something&#x0A;} catch (IllegalArgumentException e) {&#x0A;    throw e;&#x0A;} catch (IllegalStateException e) { // Can be collapsed into the previous block&#x0A;    throw e;&#x0A;}&#x0A;&#x0A;try {&#x0A;    // do something&#x0A;} catch (IllegalArgumentException | IllegalStateException e) { // This is better&#x0A;    throw e;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ICI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>InsecureCryptoIv</OriginalId>
      <GroupMember>Security Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Insecure Crypto Iv</DisplayName>
        <Description>Do not use hard coded initialization vector in crypto operations</Description>
        <HelpText>&lt;p&gt;Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void good() {&#x0A;        SecureRandom random = new SecureRandom();&#x0A;        byte iv[] = new byte[16];&#x0A;        random.nextBytes(bytes);&#x0A;    }&#x0A;&#x0A;    void bad() {&#x0A;        byte[] iv = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };&#x0A;    }&#x0A;    &#x0A;    void alsoBad() {&#x0A;        byte[] iv = &amp;quot;secret iv in here&amp;quot;.getBytes();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_IESC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>InefficientEmptyStringCheck</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Inefficient Empty String Check</DisplayName>
        <Description>String.trim().length() == 0 / String.trim().isEmpty() is an inefficient way to validate a blank String.</Description>
        <HelpText>String.trim().length() == 0 (or String.trim().isEmpty() for the same reason) is an inefficient&#x0A;way to check if a String is really blank, as it creates a new String object just to check its size.&#x0A;Consider creating a static function that loops through a string, checking Character.isWhitespace()&#x0A;on each character and returning false if a non-whitespace character is found. A Smarter code to&#x0A;check for an empty string would be:&#x0A;&#x0A;```java&#x0A;private boolean checkTrimEmpty(String str) {&#x0A;    for(int i = 0; i &lt; str.length(); i++) {&#x0A;        if(!Character.isWhitespace(str.charAt(i))) {&#x0A;            return false;&#x0A;        }&#x0A;    }&#x0A;    return true;&#x0A;}&#x0A;```&#x0A;&#x0A;You can refer to Apache&apos;s StringUtils#isBlank (in commons-lang),&#x0A;Spring&apos;s StringUtils#hasText (in the Spring framework) or Google&apos;s&#x0A;CharMatcher#whitespace (in Guava) for existing implementations (some might&#x0A;include the check for != null).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public void bar(String string) {&#x0A;    if (string != null &amp;&amp; string.trim().length() &gt; 0) {&#x0A;        doSomething();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_IESMUB">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>IfElseStmtsMustUseBraces</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>If Else Stmts Must Use Braces</DisplayName>
        <Description>Avoid using &apos;if...else&apos; statements without curly braces</Description>
        <HelpText>Avoid using if..else statements without using surrounding braces. If the code formatting &#x0A;or indentation is lost then it becomes difficult to separate the code being controlled &#x0A;from the rest.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Control Statement Braces](#PMD_CSB).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;// this is OK&#x0A;if (foo) x++;&#x0A;&#x0A;   // but this is not&#x0A;if (foo)&#x0A;       x = x+1;&#x0A;   else&#x0A;       x = x-1;&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_IF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ImmutableField</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Immutable Field</DisplayName>
        <Description>Private field &apos;&apos;{0}&apos;&apos; could be made final; it is only initialized in the declaration or constructor.</Description>
        <HelpText>&lt;p&gt;Identifies private fields whose values never change once object initialization ends either in the declaration of the field or by a constructor. This helps in converting existing classes to becoming immutable ones.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  private int x; // could be final&#x0A;  public Foo() {&#x0A;      x = 7;&#x0A;  }&#x0A;  public void foo() {&#x0A;     int a = x + 2;&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_IFSP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ImportFromSamePackage</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Import From Same Package</DisplayName>
        <Description>No need to import a type that lives in the same package</Description>
        <HelpText>&lt;p&gt;There is no need to import a type that lives in the same package.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package foo;&#x0A;&#x0A;import foo.Buz;     // no need for this&#x0A;import foo.*;       // or this&#x0A;&#x0A;public class Bar{}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_II">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>IntegerInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Integer Instantiation</DisplayName>
        <Description>Avoid instantiating Integer objects. Call Integer.valueOf() instead.</Description>
        <HelpText>Calling new Integer() causes memory allocation that can be avoided by the static Integer.valueOf().&#x0A;It makes use of an internal cache that recycles earlier instances making it more memory efficient.&#x0A;Note that new Integer() is deprecated since JDK 9 for that reason.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    private Integer i = new Integer(0); // change to Integer i = Integer.valueOf(0);&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_IO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>IdempotentOperations</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Idempotent Operations</DisplayName>
        <Description>Avoid idempotent operations (like assigning a variable to itself).</Description>
        <HelpText>&lt;p&gt;Avoid idempotent operations - they have no effect.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A; public void bar() {&#x0A;  int x = 2;&#x0A;  x = x;&#x0A; }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_IS4MF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>InvalidSlf4jMessageFormat</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Invalid Slf4j Message Format</DisplayName>
        <Description>Invalid message format</Description>
        <HelpText>&lt;p&gt;Check for messages in slf4j loggers with non matching number of arguments and placeholders.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;LOGGER.error(&amp;quot;forget the arg {}&amp;quot;);&#x0A;LOGGER.error(&amp;quot;too many args {}&amp;quot;, &amp;quot;arg1&amp;quot;, &amp;quot;arg2&amp;quot;);&#x0A;LOGGER.error(&amp;quot;param {}&amp;quot;, &amp;quot;arg1&amp;quot;, new IllegalStateException(&amp;quot;arg&amp;quot;)); //The exception is shown separately, so is correct.&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ISB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>InefficientStringBuffering</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Inefficient String Buffering</DisplayName>
        <Description>Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().</Description>
        <HelpText>&lt;p&gt;Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// Avoid this, two buffers are actually being created here&#x0A;StringBuffer sb = new StringBuffer(&amp;quot;tmp = &amp;quot;+System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));&#x0A;&#x0A;// do this instead&#x0A;StringBuffer sb = new StringBuffer(&amp;quot;tmp = &amp;quot;);&#x0A;sb.append(System.getProperty(&amp;quot;java.io.tmpdir&amp;quot;));&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ISBD">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>InsufficientStringBufferDeclaration</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Insufficient String Buffer Declaration</DisplayName>
        <Description>StringBuffer constructor is initialized with size {0}, but has at least {1} characters appended.</Description>
        <HelpText>Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many times&#x0A;during runtime. This rule attempts to determine the total number the characters that are actually &#x0A;passed into StringBuffer.append(), but represents a best guess &quot;worst case&quot; scenario. An empty&#x0A;StringBuffer/StringBuilder constructor initializes the object to 16 characters. This default&#x0A;is assumed if the length of the constructor can not be determined.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;StringBuffer bad = new StringBuffer();&#x0A;bad.append(&quot;This is a long string that will exceed the default 16 characters&quot;);&#x0A;&#x0A;StringBuffer good = new StringBuffer(41);&#x0A;good.append(&quot;This is a long string, which is pre-sized&quot;);&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ISMUB">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>IfStmtsMustUseBraces</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>If Stmts Must Use Braces</DisplayName>
        <Description>Avoid using if statements without curly braces</Description>
        <HelpText>Avoid using if statements without using braces to surround the code block. If the code &#x0A;formatting or indentation is lost then it becomes difficult to separate the code being&#x0A;controlled from the rest.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Control Statement Braces](#PMD_CSB).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;if (foo)    // not recommended&#x0A;    x++;&#x0A;&#x0A;if (foo) {  // preferred approach&#x0A;    x++;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ITGC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>InstantiationToGetClass</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Instantiation To Get Class</DisplayName>
        <Description>Avoid instantiating an object just to call getClass() on it; use the .class public member instead</Description>
        <HelpText>&lt;p&gt;Avoid instantiating an object just to call getClass() on it; use the .class public member instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// replace this&#x0A;Class c = new String().getClass();&#x0A;&#x0A;// with this:&#x0A;Class c = String.class;&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>JumbledIncrementer</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Jumbled Incrementer</DisplayName>
        <Description>Avoid modifying an outer loop incrementer in an inner loop for update expression</Description>
        <HelpText>&lt;p&gt;Avoid jumbled loop incrementers - its usually a mistake, and is confusing even if intentional.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class JumbledIncrementerRule1 {&#x0A;    public void foo() {&#x0A;        for (int i = 0; i &amp;lt; 10; i++) {          // only references &apos;i&apos;&#x0A;            for (int k = 0; k &amp;lt; 20; i++) {      // references both &apos;i&apos; and &apos;k&apos;&#x0A;                System.out.println(&amp;quot;Hello&amp;quot;);&#x0A;            }&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JU4SSUSA">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>JUnit4SuitesShouldUseSuiteAnnotation</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit4 Suites Should Use Suite Annotation</DisplayName>
        <Description>JUnit 4 indicates test suites via annotations, not the suite method.</Description>
        <HelpText>In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated&#x0A;through the @RunWith(Suite.class) annotation.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class BadExample extends TestCase{&#x0A;&#x0A;    public static Test suite(){&#x0A;        return new Suite();&#x0A;    }&#x0A;}&#x0A;&#x0A;@RunWith(Suite.class)&#x0A;@SuiteClasses( { TestOne.class, TestTwo.class })&#x0A;public class GoodTest {&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JU4TSUAA">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>JUnit4TestShouldUseAfterAnnotation</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit4 Test Should Use After Annotation</DisplayName>
        <Description>JUnit 4 tests that clean up tests should use the @After annotation, JUnit5 tests should use @AfterEach or @AfterAll</Description>
        <HelpText>In JUnit 3, the tearDown method was used to clean up all data entities required in running tests. &#x0A;JUnit 4 skips the tearDown method and executes all methods annotated with @After after running each test.&#x0A;JUnit 5 introduced @AfterEach and @AfterAll annotations to execute methods after each test or after all tests in the class, respectively.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyTest {&#x0A;    public void tearDown() {&#x0A;        bad();&#x0A;    }&#x0A;}&#x0A;public class MyTest2 {&#x0A;    @After public void tearDown() {&#x0A;        good();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JU4TSUBA">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>JUnit4TestShouldUseBeforeAnnotation</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit4 Test Should Use Before Annotation</DisplayName>
        <Description>JUnit 4 tests that set up tests should use the @Before annotation, JUnit5 tests should use @BeforeEach or @BeforeAll</Description>
        <HelpText>In JUnit 3, the setUp method was used to set up all data entities required in running tests. &#x0A;JUnit 4 skips the setUp method and executes all methods annotated with @Before before all tests.&#x0A;JUnit 5 introduced @BeforeEach and @BeforeAll annotations to execute methods before each test or before all tests in the class, respectively.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyTest {&#x0A;    public void setUp() {&#x0A;        bad();&#x0A;    }&#x0A;}&#x0A;public class MyTest2 {&#x0A;    @Before public void setUp() {&#x0A;        good();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JU4TSUTA">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>JUnit4TestShouldUseTestAnnotation</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit4 Test Should Use Test Annotation</DisplayName>
        <Description>JUnit 4 tests that execute tests should use the @Test annotation, JUnit 5 tests should use @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest</Description>
        <HelpText>In JUnit 3, the framework executed all methods which started with the word test as a unit test. &#x0A;In JUnit 4, only methods annotated with the @Test annotation are executed.&#x0A;In JUnit 5, one of the following annotations should be used for tests: @Test, @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyTest {&#x0A;    public void testBad() {&#x0A;        doSomething();&#x0A;    }&#x0A;&#x0A;    @Test&#x0A;    public void testGood() {&#x0A;        doSomething();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JUASIM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>JUnitAssertionsShouldIncludeMessage</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit Assertions Should Include Message</DisplayName>
        <Description>JUnit assertions should include a message</Description>
        <HelpText>&lt;p&gt;JUnit assertions should include an informative message - i.e., use the three-argument version of assertEquals(), not the two-argument version.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends TestCase {&#x0A;    public void testSomething() {&#x0A;        assertEquals(&amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);&#x0A;        // Use the form:&#x0A;        // assertEquals(&amp;quot;Foo does not equals bar&amp;quot;, &amp;quot;foo&amp;quot;, &amp;quot;bar&amp;quot;);&#x0A;        // instead&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JUS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>JUnitSpelling</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit Spelling</DisplayName>
        <Description>You may have misspelled a JUnit framework method (setUp or tearDown)</Description>
        <HelpText>&lt;p&gt;Some JUnit framework methods are easy to misspell.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import junit.framework.*;&#x0A;&#x0A;public class Foo extends TestCase {&#x0A;    public void setup() {}    // oops, should be setUp&#x0A;    public void TearDown() {} // oops, should be tearDown&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JUSS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>JUnitStaticSuite</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit Static Suite</DisplayName>
        <Description>You have a suite() method that is not both public and static, so JUnit won&apos;t call it to get your TestSuite.  Is that what you wanted to do?</Description>
        <HelpText>&lt;p&gt;The suite() method in a JUnit test needs to be both public and static.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import junit.framework.*;&#x0A;&#x0A;public class Foo extends TestCase {&#x0A;    public void suite() {}         // oops, should be static&#x0A;    private static void suite() {} // oops, should be public&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JUTCTMA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>JUnitTestContainsTooManyAsserts</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit Test Contains Too Many Asserts</DisplayName>
        <Description>Unit tests should not contain more than ${maximumAsserts} assert(s).</Description>
        <HelpText>&lt;p&gt;Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs.&lt;/p&gt;&#x0A;&lt;p&gt;This rule checks for JUnit4, JUnit5 and TestNG Tests, as well as methods starting with “test”.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyTestCase extends TestCase {&#x0A;    // Ok&#x0A;    public void testMyCaseWithOneAssert() {&#x0A;        boolean myVar = false;&#x0A;        assertFalse(&amp;quot;should be false&amp;quot;, myVar);&#x0A;    }&#x0A;&#x0A;    // Bad, too many asserts (assuming max=1)&#x0A;    public void testMyCaseWithMoreAsserts() {&#x0A;        boolean myVar = false;&#x0A;        assertFalse(&amp;quot;myVar should be false&amp;quot;, myVar);&#x0A;        assertEquals(&amp;quot;should equals false&amp;quot;, false, myVar);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JUTSIA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>JUnitTestsShouldIncludeAssert</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit Tests Should Include Assert</DisplayName>
        <Description>JUnit tests should include assert() or fail()</Description>
        <HelpText>&lt;p&gt;JUnit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo extends TestCase {&#x0A;   public void testSomething() {&#x0A;      Bar b = findBar();&#x0A;   // This is better than having a NullPointerException&#x0A;   // assertNotNull(&amp;quot;bar not found&amp;quot;, b);&#x0A;   b.work();&#x0A;   }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_JUUE">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>JUnitUseExpected</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>JUnit Use Expected</DisplayName>
        <Description>In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions</Description>
        <HelpText>In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyTest {&#x0A;    @Test&#x0A;    public void testBad() {&#x0A;        try {&#x0A;            doSomething();&#x0A;            fail(&quot;should have thrown an exception&quot;);&#x0A;        } catch (Exception e) {&#x0A;        }&#x0A;    }&#x0A;&#x0A;    @Test(expected=Exception.class)&#x0A;    public void testGood() {&#x0A;        doSomething();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LHNC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>LocalHomeNamingConvention</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Local Home Naming Convention</DisplayName>
        <Description>The Local Home interface of a Session EJB should be suffixed by &apos;LocalHome&apos;</Description>
        <HelpText>&lt;p&gt;The Local Home interface of a Session EJB should be suffixed by ‘LocalHome’.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name&#x0A;&#x0A;public interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>LogicInversion</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logic Inversion</DisplayName>
        <Description>Use opposite operator instead of the logic complement operator.</Description>
        <HelpText>&lt;p&gt;Use opposite operator instead of negating the whole expression with a logic complement operator.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean bar(int a, int b) {&#x0A;&#x0A;    if (!(a == b)) { // use !=&#x0A;         return false;&#x0A;     }&#x0A;&#x0A;    if (!(a &amp;lt; b)) { // use &amp;gt;=&#x0A;         return false;&#x0A;    }&#x0A;&#x0A;    return true;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LINSF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>LoggerIsNotStaticFinal</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Logger Is Not Static Final</DisplayName>
        <Description>The Logger variable declaration does not contain the static and final modifiers</Description>
        <HelpText>&lt;p&gt;In most cases, the Logger reference can be declared as static and final.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo{&#x0A;    Logger log = Logger.getLogger(Foo.class.getName());                 // not recommended&#x0A;&#x0A;    static final Logger log = Logger.getLogger(Foo.class.getName());    // preferred approach&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LISNC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>LocalInterfaceSessionNamingConvention</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Local Interface Session Naming Convention</DisplayName>
        <Description>The Local Interface of a Session EJB should be suffixed by &apos;Local&apos;</Description>
        <HelpText>&lt;p&gt;The Local Interface of a Session EJB should be suffixed by ‘Local’.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name&#x0A;&#x0A;public interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LN">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LinguisticNaming</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Linguistic Naming</DisplayName>
        <Description>Linguistics Antipattern - Method name and return type is inconsistent linguistically</Description>
        <HelpText>This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should&#x0A;            be boolean but have a different type. It also checks for methods, that according to their name, should&#x0A;            return a boolean, but don&apos;t. Further, it checks, that getters return something and setters won&apos;t.&#x0A;            Finally, it checks that methods, that start with &quot;to&quot; - so called transform methods - actually return&#x0A;            something, since according to their name, they should convert or transform one object into another.&#x0A;            There is additionally an option, to check for methods that contain &quot;To&quot; in their name - which are&#x0A;            also transform methods. However, this is disabled by default, since this detection is prone to&#x0A;            false positives.&#x0A;&#x0A;            For more information, see [Linguistic Antipatterns - What They Are and How&#x0A;Developers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class LinguisticNaming {&#x0A;    int isValid;    // the field name indicates a boolean, but it is an int.&#x0A;    boolean isTrue; // correct type of the field&#x0A;&#x0A;    void myMethod() {&#x0A;        int hasMoneyLocal;      // the local variable name indicates a boolean, but it is an int.&#x0A;        boolean hasSalaryLocal; // correct naming and type&#x0A;    }&#x0A;&#x0A;    // the name of the method indicates, it is a boolean, but the method returns an int.&#x0A;    int isValid() {&#x0A;        return 1;&#x0A;    }&#x0A;    // correct naming and return type&#x0A;    boolean isSmall() {&#x0A;        return true;&#x0A;    }&#x0A;&#x0A;    // the name indicates, this is a setter, but it returns something&#x0A;    int setName() {&#x0A;        return 1;&#x0A;    }&#x0A;&#x0A;    // the name indicates, this is a getter, but it doesn&apos;t return anything&#x0A;    void getName() {&#x0A;        // nothing to return?&#x0A;    }&#x0A;&#x0A;    // the name indicates, it transforms an object and should return the result&#x0A;    void toDataType() {&#x0A;        // nothing to return?&#x0A;    }&#x0A;    // the name indicates, it transforms an object and should return the result&#x0A;    void grapeToWine() {&#x0A;        // nothing to return?&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LOD">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LawOfDemeter</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Law Of Demeter</DisplayName>
        <Description>Potential violation of Law of Demeter</Description>
        <HelpText>The Law of Demeter is a simple rule, that says &quot;only talk to friends&quot;. It helps to reduce coupling between classes&#x0A;or objects.&#x0A;&#x0A;See also the references:&#x0A;&#x0A;*   Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.;&#x0A;*   K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.;&#x0A;*   &lt;http://www.ccs.neu.edu/home/lieber/LoD.html&gt;&#x0A;*   &lt;http://en.wikipedia.org/wiki/Law_of_Demeter&gt;&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    /**&#x0A;     * This example will result in two violations.&#x0A;     */&#x0A;    public void example(Bar b) {&#x0A;        // this method call is ok, as b is a parameter of &quot;example&quot;&#x0A;        C c = b.getC();&#x0A;&#x0A;        // this method call is a violation, as we are using c, which we got from B.&#x0A;        // We should ask b directly instead, e.g. &quot;b.doItOnC();&quot;&#x0A;        c.doIt();&#x0A;&#x0A;        // this is also a violation, just expressed differently as a method chain without temporary variables.&#x0A;        b.getC().doIt();&#x0A;&#x0A;        // a constructor call, not a method call.&#x0A;        D d = new D();&#x0A;        // this method call is ok, because we have create the new instance of D locally.&#x0A;        d.doSomethingElse(); &#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LPC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LoosePackageCoupling</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Loose Package Coupling</DisplayName>
        <Description>Use of &apos;&apos;{0}&apos;&apos; outside of package hierarchy &apos;&apos;{1}&apos;&apos; is not recommended; use recommended classes instead</Description>
        <HelpText>Avoid using classes from the configured package hierarchy outside of the package hierarchy, &#x0A;except when using one of the configured allowed classes.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;package some.package;&#x0A;&#x0A;import some.other.package.subpackage.subsubpackage.DontUseThisClass;&#x0A;&#x0A;public class Bar {&#x0A;    DontUseThisClass boo = new DontUseThisClass();&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LV">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LongVariable</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Long Variable</DisplayName>
        <Description>Avoid excessively long variable names like {0}</Description>
        <HelpText>Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Something {&#x0A;    int reallyLongIntName = -3;             // VIOLATION - Field&#x0A;    public static void main( String argumentsList[] ) { // VIOLATION - Formal&#x0A;        int otherReallyLongName = -5;       // VIOLATION - Local&#x0A;        for (int interestingIntIndex = 0;   // VIOLATION - For&#x0A;             interestingIntIndex &lt; 10;&#x0A;             interestingIntIndex ++ ) {&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LVCBF">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LocalVariableCouldBeFinal</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Local Variable Could Be Final</DisplayName>
        <Description>Local variable &apos;&apos;{0}&apos;&apos; could be declared final</Description>
        <HelpText>A local variable assigned only once can be declared final.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Bar {&#x0A;    public void foo () {&#x0A;    String txtA = &quot;a&quot;;          // if txtA will not be assigned again it is better to do this:&#x0A;    final String txtB = &quot;b&quot;;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LVNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LocalVariableNamingConventions</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Local Variable Naming Conventions</DisplayName>
        <Description>The {0} name &apos;&apos;{1}&apos;&apos; doesn&apos;&apos;t match &apos;&apos;{2}&apos;&apos;</Description>
        <HelpText>Configurable naming conventions for local variable declarations and other locally-scoped&#x0A;            variables. This rule reports variable declarations which do not match the regex that applies to their&#x0A;            specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through&#x0A;            properties.&#x0A;&#x0A;            By default this rule uses the standard Java naming convention (Camel case).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;class Foo {&#x0A;                void bar() {&#x0A;                    int localVariable = 1; // This is in camel case, so it&apos;s ok&#x0A;                    int local_variable = 1; // This will be reported unless you change the regex&#x0A;&#x0A;                    final int i_var = 1; // final local variables can be configured separately&#x0A;&#x0A;                    try {&#x0A;                        foo();&#x0A;                    } catch (IllegalArgumentException e_illegal) {&#x0A;                        // exception block parameters can be configured separately&#x0A;                    }&#x0A;&#x0A;                }&#x0A;            }&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LoC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>LooseCoupling</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Loose Coupling</DisplayName>
        <Description>Avoid using implementation types like &apos;&apos;{0}&apos;&apos;; use the interface instead</Description>
        <HelpText>&lt;p&gt;The use of implementation types (i.e., HashSet) as object references limits your ability to use alternate implementations in the future as requirements change. Whenever available, referencing objects by their interface types (i.e, Set) provides much more flexibility.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.util.ArrayList;&#x0A;import java.util.HashSet;&#x0A;&#x0A;public class Bar {&#x0A;    // sub-optimal approach&#x0A;    private ArrayList&amp;lt;SomeType&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&#x0A;&#x0A;    public HashSet&amp;lt;SomeType&amp;gt; getFoo() {&#x0A;        return new HashSet&amp;lt;SomeType&amp;gt;();&#x0A;    }&#x0A;&#x0A;    // preferred approach&#x0A;    private List&amp;lt;SomeType&amp;gt; list = new ArrayList&amp;lt;&amp;gt;();&#x0A;&#x0A;    public Set&amp;lt;SomeType&amp;gt; getFoo() {&#x0A;        return new HashSet&amp;lt;SomeType&amp;gt;();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_LoI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>LongInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Long Instantiation</DisplayName>
        <Description>Avoid instantiating Long objects.Call Long.valueOf() instead</Description>
        <HelpText>Calling new Long() causes memory allocation that can be avoided by the static Long.valueOf().&#x0A;It makes use of an internal cache that recycles earlier instances making it more memory efficient.&#x0A;Note that new Long() is deprecated since JDK 9 for that reason.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    private Long i = new Long(0); // change to Long i = Long.valueOf(0);&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MACBF">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>MethodArgumentCouldBeFinal</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Method Argument Could Be Final</DisplayName>
        <Description>Parameter &apos;&apos;{0}&apos;&apos; is not assigned and could be declared final</Description>
        <HelpText>A method argument that is never re-assigned within the method can be declared final.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public void foo1 (String param) {       // do stuff with param never assigning it&#x0A;&#x0A;}&#x0A;&#x0A;public void foo2 (final String param) { // better, do stuff with param never assigning it&#x0A;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MBIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MissingBreakInSwitch</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Break In Switch</DisplayName>
        <Description>A switch statement does not contain a break</Description>
        <HelpText>&lt;p&gt;Switch statements without break or return statements for each case option may indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar(int status) {&#x0A;    switch(status) {&#x0A;      case CANCELLED:&#x0A;        doCancelled();&#x0A;        // break; hm, should this be commented out?&#x0A;      case NEW:&#x0A;        doNew();&#x0A;        // is this really a fall-through?&#x0A;      case REMOVED:&#x0A;        doRemoved();&#x0A;        // what happens if you add another case after this one?&#x0A;      case OTHER: // empty case - this is interpreted as an intentional fall-through&#x0A;      case ERROR:&#x0A;        doErrorHandling();&#x0A;        break;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MCC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ModifiedCyclomaticComplexity</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Modified Cyclomatic Complexity</DisplayName>
        <Description>The {0} &apos;&apos;{1}&apos;&apos; has a Modified Cyclomatic Complexity of {2}.</Description>
        <HelpText>Complexity directly affects maintenance costs is determined by the number of decision points in a method &#x0A;plus one for the method entry.  The decision points include &apos;if&apos;, &apos;while&apos;, &apos;for&apos;, and &apos;case labels&apos; calls.  &#x0A;Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote&#x0A;high complexity, and 11+ is very high complexity. Modified complexity treats switch statements as a single&#x0A;decision point.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Cyclomatic Complexity](#PMD_CC).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {    // This has a Cyclomatic Complexity = 9&#x0A;1   public void example()  {&#x0A;2       if (a == b)  {&#x0A;3           if (a1 == b1) {&#x0A;                fiddle();&#x0A;4           } else if a2 == b2) {&#x0A;                fiddle();&#x0A;            }  else {&#x0A;                fiddle();&#x0A;            }&#x0A;5       } else if (c == d) {&#x0A;6           while (c == d) {&#x0A;                fiddle();&#x0A;            }&#x0A;7        } else if (e == f) {&#x0A;8           for (int n = 0; n &lt; h; n++) {&#x0A;                fiddle();&#x0A;            }&#x0A;        } else{&#x0A;9           switch (z) {&#x0A;                case 1:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;                case 2:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;                case 3:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;                default:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;            }&#x0A;        }&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MDBASBNC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MDBAndSessionBeanNamingConvention</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>MDBAnd Session Bean Naming Convention</DisplayName>
        <Description>SessionBean or MessageBean should be suffixed by Bean</Description>
        <HelpText>&lt;p&gt;The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by ‘Bean’.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeBean implements SessionBean{}                  // proper name&#x0A;&#x0A;public class MissingTheProperSuffix implements SessionBean {}   // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MNC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MisplacedNullCheck</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Misplaced Null Check</DisplayName>
        <Description>The null check here is misplaced; if the variable is null there will be a NullPointerException</Description>
        <HelpText>&lt;p&gt;The null check here is misplaced. If the variable is null a NullPointerException will be thrown. Either the check is useless (the variable will never be “null”) or it is incorrect.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void bar() {&#x0A;        if (a.equals(baz) &amp;amp;&amp;amp; a != null) {}&#x0A;        }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void bar() {&#x0A;        if (a.equals(baz) || a == null) {}&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MissingOverride</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Override</DisplayName>
        <Description>The method &apos;&apos;{0}&apos;&apos; is missing an @Override annotation.</Description>
        <HelpText>&lt;p&gt;Annotating overridden methods with &lt;span class=&quot;citation&quot; data-cites=&quot;Override&quot;&gt;@Override&lt;/span&gt; ensures at compile time that the method really overrides one, which helps refactoring and clarifies intent.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements Runnable {&#x0A;                // This method is overridden, and should have an @Override annotation&#x0A;                public void run() {&#x0A;&#x0A;                }&#x0A;            }&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MRIA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MethodReturnsInternalArray</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Method Returns Internal Array</DisplayName>
        <Description>Returning &apos;&apos;{0}&apos;&apos; may expose an internal array.</Description>
        <HelpText>&lt;p&gt;Exposing internal arrays to the caller violates object encapsulation since elements can be removed or replaced outside of the object that owns it. It is safer to return a copy of the array.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SecureSystem {&#x0A;    UserData [] ud;&#x0A;    public UserData [] getUserData() {&#x0A;        // Don&apos;t return directly the internal array, return a copy&#x0A;        return ud;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MSMINIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MissingStaticMethodInNonInstantiatableClass</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Static Method In Non Instantiatable Class</DisplayName>
        <Description>Class cannot be instantiated and does not provide any static methods or fields</Description>
        <HelpText>&lt;p&gt;A class that has private constructors and does not have any static methods or fields cannot be used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// This class is unusable, since it cannot be&#x0A;// instantiated (private constructor),&#x0A;// and no static method can be called.&#x0A;&#x0A;public class Foo {&#x0A;  private Foo() {}&#x0A;  void foo() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MSVUID">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MissingSerialVersionUID</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Missing Serial Version UID</DisplayName>
        <Description>Classes implementing Serializable should set a serialVersionUID</Description>
        <HelpText>&lt;p&gt;Serializable classes should provide a serialVersionUID field. The serialVersionUID field is also needed for abstract base classes. Each individual class in the inheritance chain needs an own serialVersionUID field. See also &lt;a href=&quot;https://stackoverflow.com/questions/893259/should-an-abstract-class-have-a-serialversionuid&quot;&gt;Should an abstract class have a serialVersionUID&lt;/a&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo implements java.io.Serializable {&#x0A;    String name;&#x0A;    // Define serialization id to avoid serialization related bugs&#x0A;    // i.e., public static final long serialVersionUID = 4328743;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MTOL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MoreThanOneLogger</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>More Than One Logger</DisplayName>
        <Description>Class contains more than one logger.</Description>
        <HelpText>&lt;p&gt;Normally only one logger is used in each class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    Logger log = Logger.getLogger(Foo.class.getName());&#x0A;    // It is very rare to see two loggers on a class, normally&#x0A;    // log information is multiplexed by levels&#x0A;    Logger log2= Logger.getLogger(Foo.class.getName());&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MVN">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>MIsLeadingVariableName</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>MIs Leading Variable Name</DisplayName>
        <Description>Avoid naming non-fields with the prefix &apos;m_&apos;</Description>
        <HelpText>Detects when a non-field has a name starting with &apos;m_&apos;.  This usually denotes a field and could be confusing.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the more general rule&#x0A;[Local Variable Naming Conventions](#PMD_LVNC).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    private int m_foo; // OK&#x0A;    public void bar(String m_baz) { // Bad&#x0A;      int m_boz = 42; // Bad&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MWSNAEC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>MethodWithSameNameAsEnclosingClass</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Method With Same Name As Enclosing Class</DisplayName>
        <Description>Classes should not have non-constructor methods with the same name as the class</Description>
        <HelpText>&lt;p&gt;Non-constructor methods should not have the same name as the enclosing class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {&#x0A;&#x0A;    public MyClass() {}         // this is OK because it is a constructor&#x0A;&#x0A;    public void MyClass() {}    // this is bad because it is a method&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_MeNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>MethodNamingConventions</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Method Naming Conventions</DisplayName>
        <Description>The {0} name &apos;&apos;{1}&apos;&apos; doesn&apos;&apos;t match &apos;&apos;{2}&apos;&apos;</Description>
        <HelpText>Configurable naming conventions for method declarations. This rule reports&#x0A;            method declarations which do not match the regex that applies to their&#x0A;            specific kind (e.g. JUnit test or native method). Each regex can be&#x0A;            configured through properties.&#x0A;&#x0A;            By default this rule uses the standard Java naming convention (Camel case).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    public void fooStuff() {&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NA">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>NullAssignment</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Null Assignment</DisplayName>
        <Description>Assigning an Object to null is a code smell.  Consider refactoring.</Description>
        <HelpText>Assigning a &quot;null&quot; to a variable (outside of its declaration) is usually bad form.  Sometimes, this type&#x0A;of assignment is an indication that the programmer doesn&apos;t completely understand what is going on in the code.&#x0A;&#x0A;NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public void bar() {&#x0A;  Object x = null; // this is OK&#x0A;  x = new Object();&#x0A;     // big, complex piece of code here&#x0A;  x = null; // this is not required&#x0A;     // big, complex piece of code here&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NCC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>NcssConstructorCount</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Ncss Constructor Count</DisplayName>
        <Description>The constructor with {0} parameters has an NCSS line count of {1}</Description>
        <HelpText>This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines&#x0A;of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm,&#x0A;lines of code that are split are counted as one.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Ncss Count](#PMD_NCo).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo extends Bar {&#x0A;    public Foo() {&#x0A;        super();&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;        //this constructor only has 1 NCSS lines&#x0A;        super.foo();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NCLISS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>NonCaseLabelInSwitchStatement</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Non Case Label In Switch Statement</DisplayName>
        <Description>A non-case label was present in a switch statement</Description>
        <HelpText>&lt;p&gt;A non-case label (e.g. a named break/continue label) was present in a switch statement. This legal, but confusing. It is easy to mix up the case labels and the non-case labels.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  void bar(int a) {&#x0A;   switch (a) {&#x0A;     case 1:&#x0A;       // do something&#x0A;       break;&#x0A;     mylabel: // this is legal, but confusing!&#x0A;       break;&#x0A;     default:&#x0A;       break;&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NCo">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>NcssCount</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Ncss Count</DisplayName>
        <Description>The {0} &apos;&apos;{1}&apos;&apos; has a NCSS line count of {2}.</Description>
        <HelpText>This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines&#x0A;of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual&#x0A;statements. For more details on the calculation, see the documentation of&#x0A;the [NCSS metric](/pmd_java_metrics_index.html#non-commenting-source-statements-ncss).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;import java.util.Collections;       // +0&#x0A;import java.io.IOException;         // +0&#x0A;&#x0A;class Foo {                         // +1, total Ncss = 12&#x0A;&#x0A;  public void bigMethod()           // +1&#x0A;      throws IOException {&#x0A;    int x = 0, y = 2;               // +1&#x0A;    boolean a = false, b = true;    // +1&#x0A;&#x0A;    if (a || b) {                   // +1&#x0A;      try {                         // +1&#x0A;        do {                        // +1&#x0A;          x += 2;                   // +1&#x0A;        } while (x &lt; 12);&#x0A;&#x0A;        System.exit(0);             // +1&#x0A;      } catch (IOException ioe) {   // +1&#x0A;        throw new PatheticFailException(ioe); // +1&#x0A;      }&#x0A;    } else {&#x0A;      assert false;                 // +1&#x0A;    }&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NMC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>NcssMethodCount</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Ncss Method Count</DisplayName>
        <Description>The method {0}() has an NCSS line count of {1}</Description>
        <HelpText>This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines&#x0A;of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm,&#x0A;lines of code that are split are counted as one.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Ncss Count](#PMD_NCo).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo extends Bar {&#x0A;    public int methd() {&#x0A;        super.methd();&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;        //this method only has 1 NCSS lines&#x0A;        return 1;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>NoPackage</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>No Package</DisplayName>
        <Description>All classes and interfaces must belong to a named package</Description>
        <HelpText>&lt;p&gt;Detects when a class or interface does not have a package definition.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// no package declaration&#x0A;public class ClassInDefaultPackage {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NPC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>NPathComplexity</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>NPath Complexity</DisplayName>
        <Description>The {0} &apos;&apos;{1}&apos;&apos; has an NPath complexity of {2}</Description>
        <HelpText>The NPath complexity of a method is the number of acyclic execution paths through that method.&#x0A;While cyclomatic complexity counts the number of decision points in a method, NPath counts the number of&#x0A;full paths from the beginning to the end of the block of the method. That metric grows exponentially, as&#x0A;it multiplies the complexity of statements in the same block. For more details on the calculation, see the&#x0A;documentation of the [NPath metric](/pmd_java_metrics_index.html#npath-complexity-npath).&#x0A;&#x0A;A threshold of 200 is generally considered the point where measures should be taken to reduce&#x0A;complexity and increase readability.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;  public static void bar() { // Ncss = 252: reported!&#x0A;    boolean a, b = true;&#x0A;    try { // 2 * 2 + 2 = 6&#x0A;      if (true) { // 2&#x0A;        List buz = new ArrayList();&#x0A;      }&#x0A;&#x0A;      for(int i = 0; i &lt; 19; i++) { // * 2&#x0A;        List buz = new ArrayList();&#x0A;      }&#x0A;    } catch(Exception e) {&#x0A;      if (true) { // 2&#x0A;        e.printStackTrace();&#x0A;      }&#x0A;    }&#x0A;&#x0A;    while (j++ &lt; 20) { //  * 2&#x0A;      List buz = new ArrayList();&#x0A;    }&#x0A;&#x0A;    switch(j) { // * 7&#x0A;      case 1:&#x0A;      case 2: break;&#x0A;      case 3: j = 5; break;&#x0A;      case 4: if (b &amp;&amp; a) { bar(); } break;&#x0A;      default: break;&#x0A;    }&#x0A;&#x0A;    do { // * 3&#x0A;        List buz = new ArrayList();&#x0A;    } while (a &amp;&amp; j++ &lt; 30);&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NSI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>NonStaticInitializer</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Non Static Initializer</DisplayName>
        <Description>Non-static initializers are confusing</Description>
        <HelpText>&lt;p&gt;A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyClass {&#x0A;  // this block gets run before any call to a constructor&#x0A;  {&#x0A;    System.out.println(&amp;quot;I am about to construct myself&amp;quot;);&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NTC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>NcssTypeCount</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Ncss Type Count</DisplayName>
        <Description>The type has an NCSS line count of {0}</Description>
        <HelpText>This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines&#x0A;of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm,&#x0A;lines of code that are split are counted as one.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Ncss Count](#PMD_NCo).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo extends Bar {&#x0A;    public Foo() {&#x0A;        //this class only has 6 NCSS lines&#x0A;        super();&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;&#x0A;        super.foo();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_NTSS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>NonThreadSafeSingleton</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Non Thread Safe Singleton</DisplayName>
        <Description>Singleton is not thread safe</Description>
        <HelpText>&lt;p&gt;Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an &lt;a href=&quot;https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom&quot;&gt;initialize-on-demand holder class&lt;/a&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Refrain from using the double-checked locking pattern. The Java Memory Model doesn’t guarantee it to work unless the variable is declared as &lt;code&gt;volatile&lt;/code&gt;, adding an uneeded performance penalty. &lt;a href=&quot;http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;&#x0A;&lt;p&gt;See Effective Java, item 48.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private static Foo foo = null;&#x0A;&#x0A;//multiple simultaneous callers may see partially initialized objects&#x0A;public static Foo getFoo() {&#x0A;    if (foo==null) {&#x0A;        foo = new Foo();&#x0A;    }&#x0A;    return foo;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_OBEAH">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>OverrideBothEqualsAndHashcode</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Override Both Equals And Hashcode</DisplayName>
        <Description>Ensure you override both equals() and hashCode()</Description>
        <HelpText>&lt;p&gt;Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {        // poor, missing a hashcode() method&#x0A;    public boolean equals(Object o) {&#x0A;      // do some comparison&#x0A;    }&#x0A;}&#x0A;&#x0A;public class Baz {        // poor, missing an equals() method&#x0A;    public int hashCode() {&#x0A;      // return some hash value&#x0A;    }&#x0A;}&#x0A;&#x0A;public class Foo {        // perfect, both methods provided&#x0A;    public boolean equals(Object other) {&#x0A;      // do some comparison&#x0A;    }&#x0A;    public int hashCode() {&#x0A;      // return some hash value&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ODPL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>OneDeclarationPerLine</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>One Declaration Per Line</DisplayName>
        <Description>Use one line for each declaration, it enhances code readability.</Description>
        <HelpText>&lt;p&gt;Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;String name;            // separate declarations&#x0A;String lastname;&#x0A;&#x0A;String name, lastname;  // combined declaration, a violation&#x0A;&#x0A;String name,&#x0A;       lastname;        // combined declaration on multiple lines, no violation by default.&#x0A;                        // Set property strictMode to true to mark this as violation.&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_OOR">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>OnlyOneReturn</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Only One Return</DisplayName>
        <Description>A method should have only one exit point, and that should be the last statement in the method</Description>
        <HelpText>A method should have only one exit point, and that should be the last statement in the method.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class OneReturnOnly1 {&#x0A;  public void foo(int x) {&#x0A;    if (x &gt; 0) {&#x0A;      return &quot;hey&quot;;   // first exit&#x0A;    }&#x0A;    return &quot;hi&quot;;    // second exit&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_OTAC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>OptimizableToArrayCall</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Optimizable To Array Call</DisplayName>
        <Description>This call to Collection.toArray() may be optimizable</Description>
        <HelpText>&lt;p&gt;Calls to a collection’s &lt;code&gt;toArray(E[])&lt;/code&gt; method should specify a target array of zero size. This allows the JVM to optimize the memory allocation and copying as much as possible.&lt;/p&gt;&#x0A;&lt;p&gt;Previous versions of this rule (pre PMD 6.0.0) suggested the opposite, but current JVM implementations perform always better, when they have full control over the target array. And allocation an array via reflection is nowadays as fast as the direct allocation.&lt;/p&gt;&#x0A;&lt;p&gt;See also &lt;a href=&quot;https://shipilev.net/blog/2016/arrays-wisdom-ancients/&quot;&gt;Arrays of Wisdom of the Ancients&lt;/a&gt;&lt;/p&gt;&#x0A;&lt;p&gt;Note: If you don’t need an array of the correct type, then the simple &lt;code&gt;toArray()&lt;/code&gt; method without an array is faster, but returns only an array of type &lt;code&gt;Object[]&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;List&amp;lt;Foo&amp;gt; foos = getFoos();&#x0A;&#x0A;// much better; this one allows the jvm to allocate an array of the correct size and effectively skip&#x0A;// the zeroing, since each array element will be overridden anyways&#x0A;Foo[] fooArray = foos.toArray(new Foo[0]);&#x0A;&#x0A;// inefficient, the array needs to be zeroed out by the jvm before it is handed over to the toArray method&#x0A;Foo[] fooArray = foos.toArray(new Foo[foos.size()]);&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>PackageCase</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Package Case</DisplayName>
        <Description>Package name contains upper case characters</Description>
        <HelpText>&lt;p&gt;Detects when a package definition contains uppercase characters.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;package com.MyCompany;  // should be lowercase name&#x0A;&#x0A;public class SomeClass {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PCI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ProperCloneImplementation</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Proper Clone Implementation</DisplayName>
        <Description>Object clone() should be implemented with super.clone()</Description>
        <HelpText>&lt;p&gt;Object clone() should be implemented with super.clone().&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo{&#x0A;    public Object clone(){&#x0A;        return new Foo(); // This is bad&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PD">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>PrematureDeclaration</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Premature Declaration</DisplayName>
        <Description>Avoid declaring a variable if it is unreferenced before a possible exit point.</Description>
        <HelpText>Checks for variables that are defined before they might be used. A reference is deemed to be premature if it is created right before a block of code that doesn&apos;t use it that also has the ability to return or throw an exception.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public int getLength(String[] strings) {&#x0A;&#x0A;    int length = 0; // declared prematurely&#x0A;&#x0A;    if (strings == null || strings.length == 0) return 0;&#x0A;&#x0A;    for (String str : strings) {&#x0A;        length += str.length();&#x0A;    }&#x0A;&#x0A;    return length;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ProperLogger</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Proper Logger</DisplayName>
        <Description>Logger should be defined private static final and have the correct class</Description>
        <HelpText>&lt;p&gt;A logger should normally be defined private static final and be associated with the correct class. Private final Log log; is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;&#x0A;    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way&#x0A;&#x0A;    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PLFIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>PositionLiteralsFirstInComparisons</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Position Literals First In Comparisons</DisplayName>
        <Description>Position literals first in String comparisons</Description>
        <HelpText>&lt;p&gt;Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  boolean bar(String x) {&#x0A;    return x.equals(&amp;quot;2&amp;quot;); // should be &amp;quot;2&amp;quot;.equals(x)&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PLFICIC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>PositionLiteralsFirstInCaseInsensitiveComparisons</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Position Literals First In Case Insensitive Comparisons</DisplayName>
        <Description>Position literals first in String comparisons for EqualsIgnoreCase</Description>
        <HelpText>&lt;p&gt;Position literals first in comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  boolean bar(String x) {&#x0A;    return x.equalsIgnoreCase(&amp;quot;2&amp;quot;); // should be &amp;quot;2&amp;quot;.equalsIgnoreCase(x)&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_PST">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>PreserveStackTrace</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Preserve Stack Trace</DisplayName>
        <Description>New exception is thrown in catch block, original stack trace may be lost</Description>
        <HelpText>&lt;p&gt;Throwing a new exception from a catch block without passing the original exception into the new exception will cause the original stack trace to be lost making it difficult to debug effectively.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void good() {&#x0A;        try{&#x0A;            Integer.parseInt(&amp;quot;a&amp;quot;);&#x0A;        } catch (Exception e) {&#x0A;            throw new Exception(e); // first possibility to create exception chain&#x0A;        }&#x0A;        try {&#x0A;            Integer.parseInt(&amp;quot;a&amp;quot;);&#x0A;        } catch (Exception e) {&#x0A;            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.&#x0A;        }&#x0A;    }&#x0A;    void bad() {&#x0A;        try{&#x0A;            Integer.parseInt(&amp;quot;a&amp;quot;);&#x0A;        } catch (Exception e) {&#x0A;            throw new Exception(e.getMessage());&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_REARTN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ReturnEmptyArrayRatherThanNull</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return Empty Array Rather Than Null</DisplayName>
        <Description>Return an empty array rather than &apos;null&apos;.</Description>
        <HelpText>&lt;p&gt;For any method that returns an array, it is a better to return an empty array rather than a null reference. This removes the need for null checking all results and avoids inadvertent NullPointerExceptions.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Example {&#x0A;    // Not a good idea...&#x0A;    public int[] badBehavior() {&#x0A;        // ...&#x0A;        return null;&#x0A;    }&#x0A;&#x0A;    // Good behavior&#x0A;    public String[] bonnePratique() {&#x0A;        //...&#x0A;        return new String[0];&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_REWI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ReplaceEnumerationWithIterator</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Replace Enumeration With Iterator</DisplayName>
        <Description>Consider replacing this Enumeration with the newer java.util.Iterator</Description>
        <HelpText>Consider replacing Enumeration usages with the newer java.util.Iterator&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo implements Enumeration {&#x0A;    private int x = 42;&#x0A;    public boolean hasMoreElements() {&#x0A;        return true;&#x0A;    }&#x0A;    public Object nextElement() {&#x0A;        return String.valueOf(i++);&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_RFFB">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ReturnFromFinallyBlock</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Return From Finally Block</DisplayName>
        <Description>Avoid returning from a finally block</Description>
        <HelpText>&lt;p&gt;Avoid returning from a finally block, this can discard exceptions.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;    public String foo() {&#x0A;        try {&#x0A;            throw new Exception( &amp;quot;My Exception&amp;quot; );&#x0A;        } catch (Exception e) {&#x0A;            throw e;&#x0A;        } finally {&#x0A;            return &amp;quot;A. O. K.&amp;quot;; // return not recommended here&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_RFI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>RedundantFieldInitializer</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Redundant Field Initializer</DisplayName>
        <Description>Avoid using redundant field initializer for &apos;&apos;${variableName}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class C {&#x0A;    boolean b   = false;    // examples of redundant initializers&#x0A;    byte by     = 0;&#x0A;    short s     = 0;&#x0A;    char c      = 0;&#x0A;    int i       = 0;&#x0A;    long l      = 0;&#x0A;&#x0A;    float f     = .0f;    // all possible float literals&#x0A;    doable d    = 0d;     // all possible double literals&#x0A;    Object o    = null;&#x0A;&#x0A;    MyClass mca[] = null;&#x0A;    int i1 = 0, ia1[] = null;&#x0A;&#x0A;    class Nested {&#x0A;        boolean b = false;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_RHWM">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ReplaceHashtableWithMap</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Replace Hashtable With Map</DisplayName>
        <Description>Consider replacing this Hashtable with the newer java.util.Map</Description>
        <HelpText>Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    void bar() {&#x0A;        Hashtable h = new Hashtable();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_RINC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>RemoteInterfaceNamingConvention</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Remote Interface Naming Convention</DisplayName>
        <Description>Remote Interface of a Session EJB should NOT be suffixed</Description>
        <HelpText>&lt;p&gt;Remote Interface of a Session EJB should not have a suffix.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;/* Poor Session suffix */&#x0A;public interface BadSuffixSession extends javax.ejb.EJBObject {}&#x0A;&#x0A;/* Poor EJB suffix */&#x0A;public interface BadSuffixEJB extends javax.ejb.EJBObject {}&#x0A;&#x0A;/* Poor Bean suffix */&#x0A;public interface BadSuffixBean extends javax.ejb.EJBObject {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_RSINC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>RemoteSessionInterfaceNamingConvention</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Remote Session Interface Naming Convention</DisplayName>
        <Description>Remote Home interface of a Session EJB should be suffixed by &apos;Home&apos;</Description>
        <HelpText>&lt;p&gt;A Remote Home interface type of a Session EJB should be suffixed by ‘Home’.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name&#x0A;&#x0A;public interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_RVWL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ReplaceVectorWithList</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Replace Vector With List</DisplayName>
        <Description>Consider replacing this Vector with the newer java.util.List</Description>
        <HelpText>Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    void bar() {&#x0A;        Vector v = new Vector();&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SBA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SimplifyBooleanAssertion</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplify Boolean Assertion</DisplayName>
        <Description>assertTrue(!expr) can be replaced by assertFalse(expr)</Description>
        <HelpText>&lt;p&gt;Avoid negation in an assertTrue or assertFalse test.&lt;/p&gt;&#x0A;&lt;p&gt;For example, rephrase:&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;assertTrue(!expr);&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;as:&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;assertFalse(expr);&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {&#x0A;    public void testX() {&#x0A;        assertTrue(&amp;quot;not empty&amp;quot;, !r.isEmpty());  // replace with assertFalse(&amp;quot;not empty&amp;quot;, r.isEmpty())&#x0A;        assertFalse(!r.isEmpty());              // replace with assertTrue(r.isEmpty())&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SBE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SimplifyBooleanExpressions</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplify Boolean Expressions</DisplayName>
        <Description>Avoid unnecessary comparisons in boolean expressions</Description>
        <HelpText>&lt;p&gt;Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Bar {&#x0A;  // can be simplified to&#x0A;  // bar = isFoo();&#x0A;  private boolean bar = (isFoo() == true);&#x0A;&#x0A;  public isFoo() { return false;}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SBIWC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>StringBufferInstantiationWithChar</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String Buffer Instantiation With Char</DisplayName>
        <Description>Do not instantiate a StringBuffer or StringBuilder with a char</Description>
        <HelpText>&lt;p&gt;Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected. Some examples:&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;new StringBuffer()      //  16&#x0A;new StringBuffer(6)     //  6&#x0A;new StringBuffer(&amp;quot;hello world&amp;quot;)  // 11 + 16 = 27&#x0A;new StringBuffer(&apos;A&apos;)   //  chr(A) = 65&#x0A;new StringBuffer(&amp;quot;A&amp;quot;)   //  1 + 16 = 17 &#x0A;&#x0A;new StringBuilder()     //  16&#x0A;new StringBuilder(6)    //  6&#x0A;new StringBuilder(&amp;quot;hello world&amp;quot;)  // 11 + 16 = 27&#x0A;new StringBuilder(&apos;C&apos;)   //  chr(C) = 67&#x0A;new StringBuilder(&amp;quot;A&amp;quot;)   //  1 + 16 = 17&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// misleading instantiation, these buffers&#x0A;// are actually sized to 99 characters long&#x0A;StringBuffer  sb1 = new StringBuffer(&apos;c&apos;);&#x0A;StringBuilder sb2 = new StringBuilder(&apos;c&apos;);&#x0A;&#x0A;// in these forms, just single characters are allocated&#x0A;StringBuffer  sb3 = new StringBuffer(&amp;quot;c&amp;quot;);&#x0A;StringBuilder sb4 = new StringBuilder(&amp;quot;c&amp;quot;);&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SBR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SimplifyBooleanReturns</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplify Boolean Returns</DisplayName>
        <Description>Avoid unnecessary if..then..else statements when returning booleans</Description>
        <HelpText>&lt;p&gt;Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean isBarEqualTo(int x) {&#x0A;    if (bar == x) {      // this bit of code...&#x0A;        return true;&#x0A;    } else {&#x0A;        return false;&#x0A;    }&#x0A;}&#x0A;&#x0A;public boolean isBarEqualTo(int x) {&#x0A;    return bar == x;    // can be replaced with this&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SimplifyConditional</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplify Conditional</DisplayName>
        <Description>No need to check for null before an instanceof</Description>
        <HelpText>&lt;p&gt;No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;  void bar(Object x) {&#x0A;    if (x != null &amp;amp;&amp;amp; x instanceof Bar) {&#x0A;      // just drop the &amp;quot;x != null&amp;quot; check&#x0A;    }&#x0A;  }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SCC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>StdCyclomaticComplexity</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Std Cyclomatic Complexity</DisplayName>
        <Description>The {0} &apos;&apos;{1}&apos;&apos; has a Standard Cyclomatic Complexity of {2}.</Description>
        <HelpText>Complexity directly affects maintenance costs is determined by the number of decision points in a method &#x0A;plus one for the method entry.  The decision points include &apos;if&apos;, &apos;while&apos;, &apos;for&apos;, and &apos;case labels&apos; calls.  &#x0A;Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote&#x0A;high complexity, and 11+ is very high complexity.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Cyclomatic Complexity](#PMD_CC).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {    // This has a Cyclomatic Complexity = 12&#x0A;1   public void example()  {&#x0A;2       if (a == b || (c == d &amp;&amp; e == f))  { // Only one&#x0A;3           if (a1 == b1) {&#x0A;                fiddle();&#x0A;4           } else if a2 == b2) {&#x0A;                fiddle();&#x0A;            }  else {&#x0A;                fiddle();&#x0A;            }&#x0A;5       } else if (c == d) {&#x0A;6           while (c == d) {&#x0A;                fiddle();&#x0A;            }&#x0A;7        } else if (e == f) {&#x0A;8           for (int n = 0; n &lt; h; n++) {&#x0A;                fiddle();&#x0A;            }&#x0A;        } else{&#x0A;            switch (z) {&#x0A;9               case 1:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;10              case 2:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;11              case 3:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;12              default:&#x0A;                    fiddle();&#x0A;                    break;&#x0A;            }&#x0A;        }&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SCFN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SuspiciousConstantFieldName</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Constant Field Name</DisplayName>
        <Description>The field name indicates a constant but its modifiers do not</Description>
        <HelpText>&lt;p&gt;Field names using all uppercase characters - Sun’s Java naming conventions indicating constants - should be declared as final.&lt;/p&gt;&#x0A;&lt;p&gt;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced by the more general rule &lt;a href=&quot;#PMD_FNC&quot;&gt;Field Naming Conventions&lt;/a&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A; // this is bad, since someone could accidentally&#x0A; // do PI = 2.71828; which is actually e&#x0A; // final double PI = 3.16; is ok&#x0A;  double PI = 3.16;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SCN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ShortClassName</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Short Class Name</DisplayName>
        <Description>Avoid short class names like {0}</Description>
        <HelpText>&lt;p&gt;Short Classnames with fewer than e.g. five characters are not recommended.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SCRNI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SingletonClassReturningNewInstance</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Singleton Class Returning New Instance</DisplayName>
        <Description>getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review</Description>
        <HelpText>&lt;p&gt;Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Singleton {&#x0A;    private static Singleton instance = null;&#x0A;    public static Singleton getInstance() {&#x0A;        synchronized(Singleton.class) {&#x0A;            return new Singleton();&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SD">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>SwitchDensity</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Switch Density</DisplayName>
        <Description>A high ratio of statements to labels in a switch statement.  Consider refactoring.</Description>
        <HelpText>A high ratio of statements to labels in a switch statement implies that the switch statement&#x0A;is overloaded.  Consider moving the statements into new methods or creating subclasses based&#x0A;on the switch variable.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;  public void bar(int x) {&#x0A;    switch (x) {&#x0A;      case 1: {&#x0A;        // lots of statements&#x0A;        break;&#x0A;      } case 2: {&#x0A;        // lots of statements&#x0A;        break;&#x0A;      }&#x0A;    }&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SDFNL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SimpleDateFormatNeedsLocale</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simple Date Format Needs Locale</DisplayName>
        <Description>When instantiating a SimpleDateFormat object, specify a Locale</Description>
        <HelpText>&lt;p&gt;Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate formatting is used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  // Should specify Locale.US (or whatever)&#x0A;  private SimpleDateFormat sdf = new SimpleDateFormat(&amp;quot;pattern&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SEJBFSBF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>StaticEJBFieldShouldBeFinal</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Static EJBField Should Be Final</DisplayName>
        <Description>EJB&apos;s shouldn&apos;t have non-final static fields</Description>
        <HelpText>&lt;p&gt;According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SomeEJB extends EJBObject implements EJBLocalHome {&#x0A;&#x0A;    private static int CountA;          // poor, field can be edited&#x0A;&#x0A;    private static final int CountB;    // preferred, read-only access&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SEMN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SuspiciousEqualsMethodName</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Equals Method Name</DisplayName>
        <Description>The method name and parameter number are suspiciously close to equals(Object)</Description>
        <HelpText>&lt;p&gt;The method name and parameter number are suspiciously close to equals(Object), which can denote an intention to override the equals(Object) method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;   public int equals(Object o) {&#x0A;     // oops, this probably was supposed to be boolean equals&#x0A;   }&#x0A;   public boolean equals(String s) {&#x0A;     // oops, this probably was supposed to be equals(Object)&#x0A;   }&#x0A;   public boolean equals(Object o1, Object o2) {&#x0A;     // oops, this probably was supposed to be equals(Object)&#x0A;   }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SingularField</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Singular Field</DisplayName>
        <Description>Perhaps &apos;&apos;{0}&apos;&apos; could be replaced by a local variable.</Description>
        <HelpText>&lt;p&gt;Fields whose scopes are limited to just single methods do not rely on the containing object to provide them to other methods. They may be better implemented as local variables within those methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private int x;  // no reason to exist at the Foo instance level&#x0A;    public void foo(int y) {&#x0A;     x = y + 5;&#x0A;     return x;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SHMN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SuspiciousHashcodeMethodName</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Hashcode Method Name</DisplayName>
        <Description>The method name and return type are suspiciously close to hashCode()</Description>
        <HelpText>&lt;p&gt;The method name and return type are suspiciously close to hashCode(), which may denote an intention to override the hashCode() method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public int hashcode() { // oops, this probably was supposed to be &apos;hashCode&apos;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ShortInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Short Instantiation</DisplayName>
        <Description>Avoid instantiating Short objects. Call Short.valueOf() instead</Description>
        <HelpText>Calling new Short() causes memory allocation that can be avoided by the static Short.valueOf().&#x0A;It makes use of an internal cache that recycles earlier instances making it more memory efficient.&#x0A;Note that new Short() is deprecated since JDK 9 for that reason.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    private Short i = new Short(0); // change to Short i = Short.valueOf(0);&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SMN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>ShortMethodName</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Short Method Name</DisplayName>
        <Description>Avoid using short method names</Description>
        <HelpText>&lt;p&gt;Method names that are very short are not helpful to the reader.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class ShortMethod {&#x0A;    public void a( int i ) { // Violation&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SMS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SingleMethodSingleton</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Single Method Singleton</DisplayName>
        <Description>Class contains multiple getInstance methods. Please review.</Description>
        <HelpText>&lt;p&gt;Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Singleton {&#x0A;&#x0A;    private static Singleton singleton = new Singleton( );&#x0A;&#x0A;    private Singleton(){ }&#x0A;&#x0A;    public static Singleton getInstance( ) {&#x0A;        return singleton;&#x0A;    }&#x0A;&#x0A;    public static Singleton getInstance(Object obj){&#x0A;        Singleton singleton = (Singleton) obj;&#x0A;        return singleton;           //violation&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SOE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SuspiciousOctalEscape</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Suspicious Octal Escape</DisplayName>
        <Description>Suspicious decimal characters following octal escape in string literal</Description>
        <HelpText>&lt;p&gt;A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by:&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Any octal escape sequence followed by non-octal digits can be confusing, e.g. “38” is interpreted as the octal escape sequence “3” followed by the literal character “8”.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() {&#x0A;  // interpreted as octal 12, followed by character &apos;8&apos;&#x0A;  System.out.println(&amp;quot;suspicious: \128&amp;quot;);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SP">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SystemPrintln</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>System Println</DisplayName>
        <Description>{0} is used</Description>
        <HelpText>&lt;p&gt;References to System.(out|err).print are usually intended for debugging purposes and can remain in the codebase even in production code. By using a logger one can enable/disable this behaviour at will (and by priority) and avoid clogging the Standard out log.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo{&#x0A;    Logger log = Logger.getLogger(Foo.class.getName());&#x0A;    public void testA () {&#x0A;        System.out.println(&amp;quot;Entering test&amp;quot;);&#x0A;        // Better use this&#x0A;        log.fine(&amp;quot;Entering test&amp;quot;);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SSSHD">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SwitchStmtsShouldHaveDefault</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Switch Stmts Should Have Default</DisplayName>
        <Description>Switch statements should have a default label</Description>
        <HelpText>&lt;p&gt;All switch statements should include a default option to catch any unspecified values.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void bar() {&#x0A;    int x = 2;&#x0A;    switch (x) {&#x0A;      case 1: int j = 6;&#x0A;      case 2: int j = 8;&#x0A;          // missing default: here&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SSW">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>SimplifyStartsWith</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplify Starts With</DisplayName>
        <Description>This call to String.startsWith can be rewritten using String.charAt(0)</Description>
        <HelpText>Since it passes in a literal of length 1, calls to (string).startsWith can be rewritten using (string).charAt(0)&#x0A;at the expense of some readability.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;&#x0A;    boolean checkIt(String x) {&#x0A;        return x.startsWith(&quot;a&quot;);   // suboptimal&#x0A;    }&#x0A;&#x0A;    boolean fasterCheckIt(String x) {&#x0A;        return x.charAt(0) == &apos;a&apos;;  // faster approach&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ST">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SimplifiedTernary</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Simplified Ternary</DisplayName>
        <Description>Ternary operators that can be simplified with || or &amp;&amp;</Description>
        <HelpText>&lt;p&gt;Look for ternary operators with the form &lt;code&gt;condition ? literalBoolean : foo&lt;/code&gt; or &lt;code&gt;condition ? foo : literalBoolean&lt;/code&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;These expressions can be simplified respectively to &lt;code&gt;condition || foo&lt;/code&gt; when the literalBoolean is true &lt;code&gt;!condition &amp;amp;&amp;amp; foo&lt;/code&gt; when the literalBoolean is false or &lt;code&gt;!condition || foo&lt;/code&gt; when the literalBoolean is true &lt;code&gt;condition &amp;amp;&amp;amp; foo&lt;/code&gt; when the literalBoolean is false&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public boolean test() {&#x0A;        return condition ? true : something(); // can be as simple as return condition || something();&#x0A;    }&#x0A;&#x0A;    public void test2() {&#x0A;        final boolean value = condition ? false : something(); // can be as simple as value = !condition &amp;amp;&amp;amp; something();&#x0A;    }&#x0A;&#x0A;    public boolean test3() {&#x0A;        return condition ? something() : true; // can be as simple as return !condition || something();&#x0A;    }&#x0A;&#x0A;    public void test4() {&#x0A;        final boolean otherValue = condition ? something() : false; // can be as simple as condition &amp;amp;&amp;amp; something();&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_STS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>StringToString</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String To String</DisplayName>
        <Description>Avoid calling toString() on String objects; this is unnecessary.</Description>
        <HelpText>&lt;p&gt;Avoid calling toString() on objects already known to be string instances; this is unnecessary.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private String baz() {&#x0A;    String bar = &amp;quot;howdy&amp;quot;;&#x0A;    return bar.toString();&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SV">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>ShortVariable</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Short Variable</DisplayName>
        <Description>Avoid variables with short names like {0}</Description>
        <HelpText>Fields, local variables, or parameter names that are very short are not helpful to the reader.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Something {&#x0A;    private int q = 15;                         // field - too short&#x0A;    public static void main( String as[] ) {    // formal arg - too short&#x0A;        int r = 20 + q;                         // local var - too short&#x0A;        for (int i = 0; i &lt; 10; i++) {          // not a violation (inside &apos;for&apos; loop)&#x0A;            r += q;&#x0A;        }&#x0A;        for (Integer i : numbers) {             // not a violation (inside &apos;for-each&apos; loop)&#x0A;            r += q;&#x0A;        }&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_SiDTE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>SignatureDeclareThrowsException</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Signature Declare Throws Exception</DisplayName>
        <Description>A method/constructor should not explicitly throw java.lang.Exception</Description>
        <HelpText>&lt;p&gt;A method/constructor shouldn’t explicitly throw the generic java.lang.Exception, since it is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand such vague interfaces. Use either a class derived from RuntimeException or a checked exception.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo() throws Exception {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_StI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>StringInstantiation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>String Instantiation</DisplayName>
        <Description>Avoid instantiating String objects; this is usually unnecessary.</Description>
        <HelpText>&lt;p&gt;Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;private String bar = new String(&amp;quot;bar&amp;quot;); // just do a String bar = &amp;quot;bar&amp;quot;;&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_TCWTC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>TestClassWithoutTestCases</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Test Class Without Test Cases</DisplayName>
        <Description>This class name ends with &apos;Test&apos; but contains no test cases</Description>
        <HelpText>&lt;p&gt;Test classes end with the suffix Test. Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named testXXX.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;//Consider changing the name of the class if it is not a test&#x0A;//Consider adding test methods if it is a test&#x0A;public class CarTest {&#x0A;   public static void main(String[] args) {&#x0A;    // do something&#x0A;   }&#x0A;   // code&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_TFBFASS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>TooFewBranchesForASwitchStatement</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Few Branches For ASwitch Statement</DisplayName>
        <Description>A switch with less than three branches is inefficient, use a &apos;if statement&apos; instead.</Description>
        <HelpText>&lt;p&gt;Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-then statements. In these cases use the if-then statement to increase code readability.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;// With a minimumNumberCaseForASwitch of 3&#x0A;public class Foo {&#x0A;    public void bar() {&#x0A;        switch (condition) {&#x0A;            case ONE:&#x0A;                instruction;&#x0A;                break;&#x0A;            default:&#x0A;                break; // not enough for a &apos;switch&apos; stmt, a simple &apos;if&apos; stmt would have been more appropriate&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_TMF">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>TooManyFields</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Fields</DisplayName>
        <Description>Too many fields</Description>
        <HelpText>Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields,&#x0A;possibly through grouping related fields in new objects.  For example, a class with individual &#x0A;city/state/zip fields could park them within a single Address field.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Person {   // too many separate fields&#x0A;   int birthYear;&#x0A;   int birthMonth;&#x0A;   int birthDate;&#x0A;   float height;&#x0A;   float weight;&#x0A;}&#x0A;&#x0A;public class Person {   // this is more manageable&#x0A;   Date birthDate;&#x0A;   BodyMeasurements measurements;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_TMM">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>TooManyMethods</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Methods</DisplayName>
        <Description>This class has too many methods, consider refactoring it.</Description>
        <HelpText>A class with too many methods is probably a good suspect for refactoring, in order to reduce its&#x0A;complexity and find a way to have more fine grained objects.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_TMSI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>TooManyStaticImports</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Too Many Static Imports</DisplayName>
        <Description>Too many static imports may lead to messy code</Description>
        <HelpText>&lt;p&gt;If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import static Lennon;&#x0A;import static Ringo;&#x0A;import static George;&#x0A;import static Paul;&#x0A;import static Yoko; // Too much !&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UAAL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseArraysAsList</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Arrays As List</DisplayName>
        <Description>Use asList instead of tight loops</Description>
        <HelpText>&lt;p&gt;The java.util.Arrays class has a “asList” method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one.&lt;/p&gt;&#x0A;&lt;p&gt;Note that the result of Arrays.asList() is backed by the specified array, changes in the returned list will result in the array to be modified. For that reason, it is not possible to add new elements to the returned list of Arrays.asList() (UnsupportedOperationException). You must use new ArrayList&amp;lt;&amp;gt;(Arrays.asList(…)) if that is inconvenient for you (e.g. because of concurrent access).&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;    public void foo(Integer[] ints) {&#x0A;        // could just use Arrays.asList(ints)&#x0A;        List&amp;lt;Integer&amp;gt; l= new ArrayList&amp;lt;&amp;gt;(100);&#x0A;        for (int i=0; i&amp;lt; 100; i++) {&#x0A;            l.add(ints[i]);&#x0A;        }&#x0A;        for (int i=0; i&amp;lt; 100; i++) {&#x0A;            l.add(a[i].toString()); // won&apos;t trigger the rule&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UAEIOAT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseAssertEqualsInsteadOfAssertTrue</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Assert Equals Instead Of Assert True</DisplayName>
        <Description>Use assertEquals(x, y) instead of assertTrue(x.equals(y))</Description>
        <HelpText>&lt;p&gt;This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like assertEquals.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {&#x0A;    void testCode() {&#x0A;        Object a, b;&#x0A;        assertTrue(a.equals(b));                    // bad usage&#x0A;        assertEquals(?a should equals b?, a, b);    // good usage&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UALIOV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseArrayListInsteadOfVector</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Array List Instead Of Vector</DisplayName>
        <Description>Use ArrayList instead of Vector</Description>
        <HelpText>&lt;p&gt;ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {&#x0A;    public void testX() {&#x0A;    Collection c1 = new Vector();&#x0A;    Collection c2 = new ArrayList();    // achieves the same with much better performance&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UANIOAT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseAssertNullInsteadOfAssertTrue</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Assert Null Instead Of Assert True</DisplayName>
        <Description>Use assertNull(x) instead of assertTrue(x==null), or assertNotNull(x) vs assertFalse(x==null)</Description>
        <HelpText>&lt;p&gt;This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertNull, assertNotNull.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {&#x0A;    void testCode() {&#x0A;        Object a = doSomething();&#x0A;        assertTrue(a==null);    // bad usage&#x0A;        assertNull(a);          // good usage&#x0A;        assertTrue(a != null);  // bad usage&#x0A;        assertNotNull(a);       // good usage&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UASIOAT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseAssertSameInsteadOfAssertTrue</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Assert Same Instead Of Assert True</DisplayName>
        <Description>Use assertSame(x, y) instead of assertTrue(x==y), or assertNotSame(x,y) vs assertFalse(x==y)</Description>
        <HelpText>&lt;p&gt;This rule detects JUnit assertions in object references equality. These assertions should be made by more specific methods, like assertSame, assertNotSame.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class FooTest extends TestCase {&#x0A;    void testCode() {&#x0A;        Object a, b;&#x0A;        assertTrue(a == b); // bad usage&#x0A;        assertSame(a, b);   // good usage&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UATIOAE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseAssertTrueInsteadOfAssertEquals</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Assert True Instead Of Assert Equals</DisplayName>
        <Description>Use assertTrue(x)/assertFalse(x) instead of assertEquals(true, x)/assertEquals(false, x) or assertEquals(Boolean.TRUE, x)/assertEquals(Boolean.FALSE, x).</Description>
        <HelpText>&lt;p&gt;When asserting a value is the same as a literal or Boxed boolean, use assertTrue/assertFalse, instead of assertEquals.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class MyTestCase extends TestCase {&#x0A;    public void testMyCase() {&#x0A;        boolean myVar = true;&#x0A;        // Ok&#x0A;        assertTrue(&amp;quot;myVar is true&amp;quot;, myVar);&#x0A;        // Bad&#x0A;        assertEquals(&amp;quot;myVar is true&amp;quot;, true, myVar);&#x0A;        // Bad&#x0A;        assertEquals(&amp;quot;myVar is false&amp;quot;, false, myVar);&#x0A;        // Bad&#x0A;        assertEquals(&amp;quot;myVar is true&amp;quot;, Boolean.TRUE, myVar);&#x0A;        // Bad&#x0A;        assertEquals(&amp;quot;myVar is false&amp;quot;, Boolean.FALSE, myVar);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UAVE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryAnnotationValueElement</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Annotation Value Element</DisplayName>
        <Description>Avoid the use of value in annotations when it&apos;s the only element</Description>
        <HelpText>&lt;p&gt;Avoid the use of value in annotations when it’s the only element.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;@TestClassAnnotation(value = &amp;quot;TEST&amp;quot;)&#x0A;public class Foo {&#x0A;&#x0A;    @TestMemberAnnotation(value = &amp;quot;TEST&amp;quot;)&#x0A;    private String y;&#x0A;&#x0A;    @TestMethodAnnotation(value = &amp;quot;TEST&amp;quot;)&#x0A;    public void bar() {&#x0A;        int x = 42;&#x0A;        return;&#x0A;    }&#x0A;}&#x0A;&#x0A;// should be&#x0A;&#x0A;@TestClassAnnotation(&amp;quot;TEST&amp;quot;)&#x0A;public class Foo {&#x0A;&#x0A;    @TestMemberAnnotation(&amp;quot;TEST&amp;quot;)&#x0A;    private String y;&#x0A;&#x0A;    @TestMethodAnnotation(&amp;quot;TEST&amp;quot;)&#x0A;    public void bar() {&#x0A;        int x = 42;&#x0A;        return;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UBA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryBooleanAssertion</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Boolean Assertion</DisplayName>
        <Description>assertTrue(true) or similar statements are unnecessary</Description>
        <HelpText>&lt;p&gt;A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of assertTrue(false) or similar) or simply removing statements like assertTrue(true) and assertFalse(false). If you just want a test to halt after finding an error, use the fail() method and provide an indication message of why it did.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class SimpleTest extends TestCase {&#x0A;    public void testX() {&#x0A;        assertTrue(true);       // serves no real purpose&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryConstructor</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Constructor</DisplayName>
        <Description>Avoid unnecessary constructors - the compiler will generate these for you</Description>
        <HelpText>&lt;p&gt;This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the constructor is identical to the default constructor. The default constructor should has same access modifier as the declaring class. In an enum type, the default constructor is implicitly private.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;  public Foo() {}&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UCC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryCaseChange</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Case Change</DisplayName>
        <Description>Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals().</Description>
        <HelpText>&lt;p&gt;Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;boolean answer1 = buz.toUpperCase().equals(&amp;quot;baz&amp;quot;);              // should be buz.equalsIgnoreCase(&amp;quot;baz&amp;quot;)&#x0A;&#x0A;boolean answer2 = buz.toUpperCase().equalsIgnoreCase(&amp;quot;baz&amp;quot;);    // another unnecessary toUpperCase()&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UCEL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseCorrectExceptionLogging</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Correct Exception Logging</DisplayName>
        <Description>Use the correct logging statement for logging exceptions</Description>
        <HelpText>&lt;p&gt;To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Main {&#x0A;    private static final Log _LOG = LogFactory.getLog( Main.class );&#x0A;    void bar() {&#x0A;        try {&#x0A;        } catch( Exception e ) {&#x0A;            _LOG.error( e ); //Wrong!&#x0A;        } catch( OtherException oe ) {&#x0A;            _LOG.error( oe.getMessage(), oe ); //Correct&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UCHM">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UseConcurrentHashMap</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Concurrent Hash Map</DisplayName>
        <Description>If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation</Description>
        <HelpText>Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can&#x0A;perform efficient map reads without blocking other threads.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class ConcurrentApp {&#x0A;  public void getMyInstance() {&#x0A;    Map map1 = new HashMap();           // fine for single-threaded access&#x0A;    Map map2 = new ConcurrentHashMap(); // preferred for use with multiple threads&#x0A;&#x0A;    // the following case will be ignored by this rule&#x0A;    Map map3 = someModule.methodThatReturnMap(); // might be OK, if the returned map is already thread-safe&#x0A;  }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UCIE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseCollectionIsEmpty</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Collection Is Empty</DisplayName>
        <Description>Substitute calls to size() == 0 (or size() != 0, size() &gt; 0, size() &lt; 1) with calls to isEmpty()</Description>
        <HelpText>&lt;p&gt;The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void good() {&#x0A;        List foo = getList();&#x0A;        if (foo.isEmpty()) {&#x0A;            // blah&#x0A;        }&#x0A;    }&#x0A;&#x0A;    void bad() {&#x0A;        List foo = getList();&#x0A;        if (foo.size() == 0) {&#x0A;            // blah&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UCT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryConversionTemporary</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Conversion Temporary</DisplayName>
        <Description>Avoid unnecessary temporaries when converting primitives to Strings</Description>
        <HelpText>&lt;p&gt;Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public String convert(int x) {&#x0A;    String foo = new Integer(x).toString(); // this wastes an object&#x0A;&#x0A;    return Integer.toString(x);             // preferred approach&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UDO">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseDiamondOperator</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Diamond Operator</DisplayName>
        <Description>Explicit type arguments can be replaced by Diamond Operator</Description>
        <HelpText>&lt;p&gt;Use the diamond operator to let the type be inferred automatically. With the Diamond operator it is possible to avoid duplication of the type parameters. Instead, the compiler is now able to infer the parameter types for constructor calls, which makes the code also more readable.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;List&amp;lt;String&amp;gt; strings = new ArrayList&amp;lt;String&amp;gt;(); // unnecessary duplication of type parameters&#x0A;List&amp;lt;String&amp;gt; stringsWithDiamond = new ArrayList&amp;lt;&amp;gt;(); // using the diamond operator is more concise&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UEC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UncommentedEmptyConstructor</OriginalId>
      <GroupMember>Documentation Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Uncommented Empty Constructor</DisplayName>
        <Description>Document empty constructor</Description>
        <HelpText>&lt;p&gt;Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public Foo() {&#x0A;  // This constructor is intentionally empty. Nothing special is needed here.&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UEM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UncommentedEmptyMethodBody</OriginalId>
      <GroupMember>Documentation Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Uncommented Empty Method Body</DisplayName>
        <Description>Document empty method body</Description>
        <HelpText>&lt;p&gt;Uncommented Empty Method Body finds instances where a method body does not contain statements, but there is no comment. By explicitly commenting empty method bodies it is easier to distinguish between intentional (commented) and unintentional empty methods.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void doSomething() {&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UETCS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseEqualsToCompareStrings</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Equals To Compare Strings</DisplayName>
        <Description>Use equals() to compare strings instead of &apos;&apos;==&apos;&apos; or &apos;&apos;!=&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Using ‘==’ or ‘!=’ to compare strings only works if intern version is used on both sides. Use the equals() method instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public boolean test(String s) {&#x0A;    if (s == &amp;quot;one&amp;quot;) return true;        // unreliable&#x0A;    if (&amp;quot;two&amp;quot;.equals(s)) return true;   // better&#x0A;    return false;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UFP">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UnusedFormalParameter</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Formal Parameter</DisplayName>
        <Description>Avoid unused {0} parameters such as &apos;&apos;{1}&apos;&apos;.</Description>
        <HelpText>Avoid passing parameters to methods or constructors without actually referencing them in the method body.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    private void bar(String howdy) {&#x0A;        // howdy is not used&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UFQN">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryFullyQualifiedName</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Fully Qualified Name</DisplayName>
        <Description>Unnecessary use of fully qualified name &apos;&apos;{0}&apos;&apos; due to existing {2}import &apos;&apos;{1}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.util.List;&#x0A;&#x0A;public class Foo {&#x0A;    private java.util.List list1;   // Unnecessary FQN&#x0A;    private List list2;             // More appropriate given import of &apos;java.util.List&apos;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UIOC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UseIndexOfChar</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Index Of Char</DisplayName>
        <Description>String.indexOf(char) is faster than String.indexOf(String).</Description>
        <HelpText>Use String.indexOf(char) when checking for the index of a single character; it executes faster.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;String s = &quot;hello world&quot;;&#x0A;// avoid this&#x0A;if (s.indexOf(&quot;d&quot;) {}&#x0A;// instead do this&#x0A;if (s.indexOf(&apos;d&apos;) {}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UIS">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnconditionalIfStatement</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unconditional If Statement</DisplayName>
        <Description>Do not use &apos;if&apos; statements that are always true or always false</Description>
        <HelpText>&lt;p&gt;Do not use “if” statements whose conditionals are always true or always false.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void close() {&#x0A;        if (true) {        // fixed conditional, not recommended&#x0A;            // ...&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ULBR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryLocalBeforeReturn</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Local Before Return</DisplayName>
        <Description>Consider simply returning the value vs storing it in local variable &apos;&apos;{0}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Avoid the creation of unnecessary local variables&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;   public int foo() {&#x0A;     int x = doSomething();&#x0A;     return x;  // instead, just &apos;return doSomething();&apos;&#x0A;   }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ULV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnusedLocalVariable</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Local Variable</DisplayName>
        <Description>Avoid unused local variables such as &apos;&apos;{0}&apos;&apos;.</Description>
        <HelpText>&lt;p&gt;Detects when a local variable is declared and/or assigned, but not used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void doSomething() {&#x0A;        int i = 5; // Unused&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_ULWCC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseLocaleWithCaseConversions</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Locale With Case Conversions</DisplayName>
        <Description>When doing a String.toLowerCase()/toUpperCase() call, use a Locale</Description>
        <HelpText>&lt;p&gt;When doing String.toLowerCase()/toUpperCase() conversions, use Locales to avoids problems with languages that have unusual conventions, i.e. Turkish.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;class Foo {&#x0A;    // BAD&#x0A;    if (x.toLowerCase().equals(&amp;quot;list&amp;quot;)) { }&#x0A;&#x0A;    /*&#x0A;     * This will not match &amp;quot;LIST&amp;quot; when in Turkish locale&#x0A;     * The above could be&#x0A;     * if (x.toLowerCase(Locale.US).equals(&amp;quot;list&amp;quot;)) { }&#x0A;     * or simply&#x0A;     * if (x.equalsIgnoreCase(&amp;quot;list&amp;quot;)) { }&#x0A;     */&#x0A;    // GOOD&#x0A;    String z = a.toLowerCase(Locale.EN);&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UNAION">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseNotifyAllInsteadOfNotify</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Notify All Instead Of Notify</DisplayName>
        <Description>Call Thread.notifyAll() rather than Thread.notify()</Description>
        <HelpText>&lt;p&gt;Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus its usually safer to call notifyAll() instead.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;void bar() {&#x0A;    x.notify();&#x0A;    // If many threads are monitoring x, only one (and you won&apos;t know which) will be notified.&#x0A;    // use instead:&#x0A;    x.notifyAll();&#x0A;  }&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UNCIE">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnusedNullCheckInEquals</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Null Check In Equals</DisplayName>
        <Description>Invoke equals() on the object you&apos;&apos;ve already ensured is not null</Description>
        <HelpText>&lt;p&gt;After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object’s equals() method.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Test {&#x0A;&#x0A;    public String method1() { return &amp;quot;ok&amp;quot;;}&#x0A;    public String method2() { return null;}&#x0A;&#x0A;    public void method(String a) {&#x0A;        String b;&#x0A;        // I don&apos;t know it method1() can be &amp;quot;null&amp;quot;&#x0A;        // but I know &amp;quot;a&amp;quot; is not null..&#x0A;        // I&apos;d better write a.equals(method1())&#x0A;&#x0A;        if (a!=null &amp;amp;&amp;amp; method1().equals(a)) { // will trigger the rule&#x0A;            //whatever&#x0A;        }&#x0A;&#x0A;        if (method1().equals(a) &amp;amp;&amp;amp; a != null) { // won&apos;t trigger the rule&#x0A;            //whatever&#x0A;        }&#x0A;&#x0A;        if (a!=null &amp;amp;&amp;amp; method1().equals(b)) { // won&apos;t trigger the rule&#x0A;            //whatever&#x0A;        }&#x0A;&#x0A;        if (a!=null &amp;amp;&amp;amp; &amp;quot;LITERAL&amp;quot;.equals(a)) { // won&apos;t trigger the rule&#x0A;            //whatever&#x0A;        }&#x0A;&#x0A;        if (a!=null &amp;amp;&amp;amp; !a.equals(&amp;quot;go&amp;quot;)) { // won&apos;t trigger the rule&#x0A;            a=method2();&#x0A;            if (method1().equals(a)) {&#x0A;                //whatever&#x0A;            }&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UOFCAPI">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UseObjectForClearerAPI</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Object For Clearer API</DisplayName>
        <Description>Rather than using a lot of String arguments, consider using a container object for those values.</Description>
        <HelpText>When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class&#x0A;will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information&#x0A;as a simple series of Strings, you may think of using an Object to represent all those information. You&apos;ll get a simpler&#x0A;API (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some&#x0A;point to pass extra data, you&apos;ll be able to do so by simply modifying or extending Workload without any modification to&#x0A;your API.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MyClass {&#x0A;    public void connect(String username,&#x0A;        String pssd,&#x0A;        String databaseName,&#x0A;        String databaseAdress)&#x0A;        // Instead of those parameters object&#x0A;        // would ensure a cleaner API and permit&#x0A;        // to add extra data transparently (no code change):&#x0A;        // void connect(UserData data);&#x0A;    {&#x0A;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UOM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UselessOverridingMethod</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Overriding Method</DisplayName>
        <Description>Overriding method merely calls super</Description>
        <HelpText>&lt;p&gt;The overriding method merely calls the same method defined in a superclass.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public void foo(String bar) {&#x0A;    super.foo(bar);      // why bother overriding?&#x0A;}&#x0A;&#x0A;public String foo() {&#x0A;    return super.foo();  // why bother overriding?&#x0A;}&#x0A;&#x0A;@Id&#x0A;public Long getId() {&#x0A;    return super.getId();  // OK if &apos;ignoreAnnotations&apos; is false, which is the default behavior&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UOOI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UselessOperationOnImmutable</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Operation On Immutable</DisplayName>
        <Description>An operation on an Immutable object (String, BigDecimal or BigInteger) won&apos;t change the object itself</Description>
        <HelpText>&lt;p&gt;An operation on an Immutable object (String, BigDecimal or BigInteger) won’t change the object itself since the result of the operation is a new object. Therefore, ignoring the operation result is an error.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.math.*;&#x0A;&#x0A;class Test {&#x0A;    void method1() {&#x0A;        BigDecimal bd=new BigDecimal(10);&#x0A;        bd.add(new BigDecimal(5));      // this will trigger the rule&#x0A;    }&#x0A;    void method2() {&#x0A;        BigDecimal bd=new BigDecimal(10);&#x0A;        bd = bd.add(new BigDecimal(5)); // this won&apos;t trigger the rule&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UPCL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UseProperClassLoader</OriginalId>
      <GroupMember>Error Prone Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Proper Class Loader</DisplayName>
        <Description>In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead.</Description>
        <HelpText>In J2EE, the getClassLoader() method might not work as expected. Use &#x0A;Thread.currentThread().getContextClassLoader() instead.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    ClassLoader cl = Bar.class.getClassLoader();&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UPF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnusedPrivateField</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Private Field</DisplayName>
        <Description>Avoid unused private fields such as &apos;&apos;{0}&apos;&apos;.</Description>
        <HelpText>&lt;p&gt;Detects when a private field is declared and/or assigned a value, but not used.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Something {&#x0A;    private static int FOO = 2; // Unused&#x0A;    private int i = 5; // Unused&#x0A;    private int j = 6;&#x0A;    public int addOne() {&#x0A;        return j++;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UPM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnusedPrivateMethod</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Private Method</DisplayName>
        <Description>Avoid unused private methods such as &apos;&apos;{0}&apos;&apos;.</Description>
        <HelpText>&lt;p&gt;Unused Private Method detects when a private method is declared but is unused.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Something {&#x0A;    private void foo() {} // unused&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UQT">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UselessQualifiedThis</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Qualified This</DisplayName>
        <Description>Useless qualified this usage in the same class.</Description>
        <HelpText>&lt;p&gt;Reports qualified this usages in the same class.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    final Foo otherFoo = Foo.this;  // use &amp;quot;this&amp;quot; directly&#x0A;&#x0A;    public void doSomething() {&#x0A;         final Foo anotherFoo = Foo.this;  // use &amp;quot;this&amp;quot; directly&#x0A;    }&#x0A;&#x0A;    private ActionListener returnListener() {&#x0A;        return new ActionListener() {&#x0A;            @Override&#x0A;            public void actionPerformed(ActionEvent e) {&#x0A;                doSomethingWithQualifiedThis(Foo.this);  // This is fine&#x0A;            }&#x0A;        };&#x0A;    }&#x0A;&#x0A;    private class Foo3 {&#x0A;        final Foo myFoo = Foo.this;  // This is fine&#x0A;    }&#x0A;&#x0A;    private class Foo2 {&#x0A;        final Foo2 myFoo2 = Foo2.this;  // Use &amp;quot;this&amp;quot; direclty&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UR">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryReturn</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Return</DisplayName>
        <Description>Avoid unnecessary return statements</Description>
        <HelpText>Avoid the use of unnecessary return statements.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    public void bar() {&#x0A;        int x = 42;&#x0A;        return;&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_USBFSA">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseStringBufferForStringAppends</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use String Buffer For String Appends</DisplayName>
        <Description>Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings</Description>
        <HelpText>&lt;p&gt;The use of the ‘+=’ operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    void bar() {&#x0A;        String a;&#x0A;        a = &amp;quot;foo&amp;quot;;&#x0A;        a += &amp;quot; bar&amp;quot;;&#x0A;        // better would be:&#x0A;        // StringBuilder a = new StringBuilder(&amp;quot;foo&amp;quot;);&#x0A;        // a.append(&amp;quot; bar&amp;quot;);&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_USBL">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UseStringBufferLength</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use String Buffer Length</DisplayName>
        <Description>This is an inefficient use of StringBuffer.toString; call StringBuffer.length instead.</Description>
        <HelpText>Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals(&quot;&quot;)&#x0A;or StringBuffer.toString().length() == ...&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;StringBuffer sb = new StringBuffer();&#x0A;&#x0A;if (sb.toString().equals(&quot;&quot;)) {}        // inefficient&#x0A;&#x0A;if (sb.length() == 0) {}                // preferred&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_USDF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnsynchronizedStaticDateFormatter</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsynchronized Static Date Formatter</DisplayName>
        <Description>Static DateFormatter objects should be accessed in a synchronized manner</Description>
        <HelpText>&lt;p&gt;SimpleDateFormat instances are not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.&lt;/p&gt;&#x0A;&lt;p&gt;This rule has been deprecated in favor of the rule &lt;a href=&quot;#PMD_USF&quot;&gt;Unsynchronized Static Formatter&lt;/a&gt;.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private static final SimpleDateFormat sdf = new SimpleDateFormat();&#x0A;    void bar() {&#x0A;        sdf.format(); // poor, no thread-safety&#x0A;    }&#x0A;    synchronized void foo() {&#x0A;        sdf.format(); // preferred&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Critical</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_USF">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnsynchronizedStaticFormatter</OriginalId>
      <GroupMember>Multithreading Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unsynchronized Static Formatter</DisplayName>
        <Description>Static Formatter objects should be accessed in a synchronized manner</Description>
        <HelpText>&lt;p&gt;Instances of &lt;code&gt;java.text.Format&lt;/code&gt; are generally not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized either on method or block level.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private static final SimpleDateFormat sdf = new SimpleDateFormat();&#x0A;    void bar() {&#x0A;        sdf.format(); // poor, no thread-safety&#x0A;    }&#x0A;    synchronized void foo() {&#x0A;        sdf.format(); // preferred&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_USVO">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UselessStringValueOf</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless String Value Of</DisplayName>
        <Description>No need to call String.valueOf to append to a string.</Description>
        <HelpText>No need to call String.valueOf to append to a string; just use the valueOf() argument directly.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public String convert(int i) {&#x0A;    String s;&#x0A;    s = &quot;a&quot; + String.valueOf(i);    // not required&#x0A;    s = &quot;a&quot; + i;                    // preferred approach&#x0A;    return s;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UTWR">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseTryWithResources</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Try With Resources</DisplayName>
        <Description>Consider using a try-with-resources statement instead of explicitly closing the resource</Description>
        <HelpText>&lt;p&gt;Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions are better handled: If an exception occurred both in the &lt;code&gt;try&lt;/code&gt; block and &lt;code&gt;finally&lt;/code&gt; block, then the exception from the try block was suppressed. With the &lt;code&gt;try&lt;/code&gt;-with-resources statement, the exception thrown from the try-block is preserved.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class TryWithResources {&#x0A;    public void run() {&#x0A;        InputStream in = null;&#x0A;        try {&#x0A;            in = openInputStream();&#x0A;            int i = in.read();&#x0A;        } catch (IOException e) {&#x0A;            e.printStackTrace();&#x0A;        } finally {&#x0A;            try {&#x0A;                if (in != null) in.close();&#x0A;            } catch (IOException ignored) {&#x0A;                // ignored&#x0A;            }&#x0A;        }&#x0A;&#x0A;        // better use try-with-resources&#x0A;        try (InputStream in2 = openInputStream()) {&#x0A;            int i = in2.read();&#x0A;        }&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UUC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UseUtilityClass</OriginalId>
      <GroupMember>Design Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Utility Class</DisplayName>
        <Description>All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.</Description>
        <HelpText>For classes that only have static methods, consider making them utility classes.&#x0A;Note that this doesn&apos;t apply to abstract classes, since their subclasses may&#x0A;well include non-static methods.  Also, if you want this class to be a utility class,&#x0A;remember to add a private constructor to prevent instantiation.&#x0A;(Note, that this use was known before PMD 5.1.0 as UseSingleton).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class MaybeAUtility {&#x0A;  public static void foo() {}&#x0A;  public static void bar() {}&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UUINL">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseUnderscoresInNumericLiterals</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Underscores In Numeric Literals</DisplayName>
        <Description>Number {0} should separate every third digit with an underscore</Description>
        <HelpText>&lt;p&gt;Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that numeric literals above a certain length use these underscores to increase readability.&lt;/p&gt;&#x0A;&lt;pre&gt;&lt;code&gt;        The rule only supports decimal (base 10) literals for now. The acceptable length under which literals&#x0A;        are not required to have underscores is configurable via a property. Even under that length, underscores&#x0A;        that are misplaced (not making groups of 3 digits) are reported.&lt;/code&gt;&lt;/pre&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    private int num = 1000000; // should be 1_000_000&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UV">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UseVarargs</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Use Varargs</DisplayName>
        <Description>Consider using varargs for methods or constructors which take an array the last parameter.</Description>
        <HelpText>&lt;p&gt;Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public class Foo {&#x0A;    public void foo(String s, Object[] args) {&#x0A;        // Do something here...&#x0A;    }&#x0A;&#x0A;    public void bar(String s, Object... args) {&#x0A;        // Ahh, varargs tastes much better...&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UWOC">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryWrapperObjectCreation</OriginalId>
      <GroupMember>Performance Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Wrapper Object Creation</DisplayName>
        <Description>Unnecessary wrapper object creation</Description>
        <HelpText>&lt;p&gt;Most wrapper classes provide static conversion methods that avoid the need to create intermediate objects just to create the primitive forms. Using these avoids the cost of creating objects that also need to be garbage-collected later.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public int convert(String s) {&#x0A;    int i, i2;&#x0A;&#x0A;    i = Integer.valueOf(s).intValue();  // this wastes an object&#x0A;    i = Integer.parseInt(s);            // this is better&#x0A;&#x0A;    i2 = Integer.valueOf(i).intValue(); // this wastes an object&#x0A;    i2 = i;                             // this is better&#x0A;&#x0A;    String s3 = Integer.valueOf(i2).toString(); // this wastes an object&#x0A;    s3 = Integer.toString(i2);                  // this is better&#x0A;&#x0A;    return i2;&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Major</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UnI">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnusedImports</OriginalId>
      <GroupMember>Best Practice Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unused Imports</DisplayName>
        <Description>Avoid unused imports such as &apos;&apos;{0}&apos;&apos;</Description>
        <HelpText>&lt;p&gt;Avoid unused import statements to prevent unwanted dependencies. This rule will also find unused on demand imports, i.e. import com.foo.*.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;import java.io.File;  // not referenced or required&#x0A;import java.util.*;   // not referenced or required&#x0A;&#x0A;public class Foo {}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UnM">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Group>false</Group>
      <OriginalId>UnnecessaryModifier</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Unnecessary Modifier</DisplayName>
        <Description>Unnecessary modifier{0} on {1} &apos;&apos;{2}&apos;&apos;{3}</Description>
        <HelpText>&lt;p&gt;Fields in interfaces and annotations are automatically &lt;code&gt;public static final&lt;/code&gt;, and methods are &lt;code&gt;public abstract&lt;/code&gt;. Classes, interfaces or annotations nested in an interface or annotation are automatically &lt;code&gt;public static&lt;/code&gt; (all nested interfaces and annotations are automatically static). Nested enums are automatically &lt;code&gt;static&lt;/code&gt;. For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.&lt;/p&gt;&#x0A;&lt;p&gt;Example(s):&lt;/p&gt;&#x0A;&lt;pre class=&quot;java&quot;&gt;&lt;code&gt;public @interface Annotation {&#x0A;    public abstract void bar();     // both abstract and public are ignored by the compiler&#x0A;    public static final int X = 0;  // public, static, and final all ignored&#x0A;    public static class Bar {}      // public, static ignored&#x0A;    public static interface Baz {}  // ditto&#x0A;}&#x0A;public interface Foo {&#x0A;    public abstract void bar();     // both abstract and public are ignored by the compiler&#x0A;    public static final int X = 0;  // public, static, and final all ignored&#x0A;    public static class Bar {}      // public, static ignored&#x0A;    public static interface Baz {}  // ditto&#x0A;}&#x0A;public class Bar {&#x0A;    public static interface Baz {}  // static ignored&#x0A;    public static enum FoorBar {    // static ignored&#x0A;        FOO;&#x0A;    }&#x0A;}&lt;/code&gt;&lt;/pre&gt;&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_UsP">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>UselessParentheses</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Useless Parentheses</DisplayName>
        <Description>Useless parentheses.</Description>
        <HelpText>Useless parentheses should be removed.&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;&#x0A;    private int _bar1;&#x0A;    private Integer _bar2;&#x0A;&#x0A;    public void setBar(int n) {&#x0A;        _bar1 = Integer.valueOf((n)); // here&#x0A;        _bar2 = (n); // and here&#x0A;    }&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_VNC">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>VariableNamingConventions</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Variable Naming Conventions</DisplayName>
        <Description>{0} variable {1} should begin with {2}</Description>
        <HelpText>A variable naming conventions rule - customize this to your liking.  Currently, it&#x0A;checks for final variables that should be fully capitalized and non-final variables&#x0A;that should not include underscores.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the more general rules [Field Naming Conventions](#PMD_FNC),&#x0A;[Formal Parameter Naming Conventions](#PMD_FPNC), and&#x0A;[Local Variable Naming Conventions](#PMD_LVNC).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;public class Foo {&#x0A;    public static final int MY_NUM = 0;&#x0A;    public String myTest = &quot;&quot;;&#x0A;    DataModule dmTest = new DataModule();&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "PMD_WLMUB">
    <Configuration name = "Default">
      <Enabled>false</Enabled>
      <Group>false</Group>
      <OriginalId>WhileLoopsMustUseBraces</OriginalId>
      <GroupMember>Code Style Rules</GroupMember>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>While Loops Must Use Braces</DisplayName>
        <Description>Avoid using &apos;while&apos; statements without curly braces</Description>
        <HelpText>Avoid using &apos;while&apos; statements without using braces to surround the code block. If the code &#x0A;formatting or indentation is lost then it becomes difficult to separate the code being&#x0A;controlled from the rest.&#x0A;&#x0A;This rule is deprecated and will be removed with PMD 7.0.0. The rule is replaced&#x0A;by the rule [Control Statement Braces](#PMD_CSB).&#x0A;&#x0A;Example(s):&#x0A;&#x0A;```java&#x0A;while (true)    // not recommended&#x0A;      x++;&#x0A;      &#x0A;while (true) {  // preferred approach&#x0A;      x++;&#x0A;}&#x0A;```&#x0A;</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Performance Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Performance</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Performance Rules</DisplayName>
        <Description>Rules that flag suboptimal code.</Description>
        <HelpText>Rules that flag suboptimal code.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
  <Metric id = "Security Rules">
    <Configuration name = "Default">
      <Enabled>true</Enabled>
      <Visible>true</Visible>
      <Group>summarized</Group>
      <OriginalId>Security</OriginalId>
      <Language lang = "eng">
        <Warning>true</Warning>
        <DisplayName>Security Rules</DisplayName>
        <Description>Rules that flag potential security flaws.</Description>
        <HelpText>Rules that flag potential security flaws.</HelpText>
      </Language>
      <Baselines/>
      <Settings>
        <Setting name = "Priority" editable = "true">Minor</Setting>
      </Settings>
      <Calculated/>
    </Configuration>
  </Metric>
</Rul>
